import { Web3Provider, FallbackProvider, BaseProvider, JsonRpcSigner } from "@ethersproject/providers";
import { VoidSigner } from "ethers";
export declare type Provider = null | Web3Provider | FallbackProvider | BaseProvider;
export declare type Network = {
    name: string;
    chainId: number;
    blockHeight: number;
    publicEndpoints: string[];
    explorerUrl: string;
};
export interface Account {
    isLogged: boolean;
    address: string;
    balance: string | number;
    walletType: string;
    signer: JsonRpcSigner | VoidSigner;
}
export declare type Methods = {
    launchConnection: (connectionType: ConnectionType) => void;
    setAutoRefresh: (setTo: boolean) => void;
    switchNetwork: (chainId: number) => void;
    loginToInjected: () => void;
    createVoidSigner: (address: string) => void;
    deleteVoidSigner: () => void;
    getNetworkList: () => Network[];
};
export declare type ConnectionType = "not initialized" | "injected" | "endpoints";
export interface Config {
    connectionType: ConnectionType;
    customNetworks: Network[];
    chainId: number;
    apiKeys: ApiKeysOption;
}
export declare type ContextLoad = {
    connectionType: ConnectionType;
    autoRefreshActive: boolean;
    haveWebExtension: boolean;
    methods: Methods;
    provider: Provider;
    network: Network;
    account: Account;
};
export declare type ApiKeysOption = {
    infura: string | undefined;
    etherscan: string | undefined;
    alchemy: string | undefined;
    pocket: string | undefined;
    quorum: number;
};
