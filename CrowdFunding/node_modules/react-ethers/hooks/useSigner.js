var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect } from "react";
export const useSigner = (setAccount, provider, network, voidSigner) => {
    // Manage account list and try to deconnect by empty this list
    useEffect(() => {
        if (provider) {
            if (provider.hasOwnProperty("providerConfigs")) {
                if (voidSigner) {
                    setAccount((a) => {
                        ;
                        (() => __awaiter(void 0, void 0, void 0, function* () {
                            a.address = yield a.signer.getAddress();
                            a.balance = (yield a.signer.getBalance()).toString();
                        }))();
                        return a;
                    });
                }
                else {
                    setAccount({});
                }
            }
            else {
                ;
                (() => __awaiter(void 0, void 0, void 0, function* () {
                    const request = provider.provider.request;
                    let accounts;
                    if (request) {
                        accounts = yield request({
                            method: "eth_accounts",
                        });
                    }
                    if (accounts.length > 0) {
                        const signer = provider.getSigner();
                        const address = yield signer.getAddress();
                        const balance = yield signer.getBalance();
                        setAccount({
                            address,
                            signer,
                            balance: balance.toString(),
                            isLogged: true,
                            walletType: provider.connection.url,
                        });
                    }
                    else {
                        if (voidSigner) {
                            setAccount((a) => {
                                ;
                                (() => __awaiter(void 0, void 0, void 0, function* () {
                                    a.address = yield a.signer.getAddress();
                                    a.balance = (yield a.signer.getBalance()).toString();
                                }))();
                                return a;
                            });
                        }
                        else {
                            setAccount({});
                        }
                    }
                }))();
            }
        }
    }, [provider, network.blockHeight, setAccount, voidSigner]);
};
// Another hooks for VoidSigner
