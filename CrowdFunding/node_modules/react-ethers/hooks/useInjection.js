/**
 * Should detect the wallet
 * @returns Web3Provider
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ethers } from "ethers";
import { useCallback, useEffect } from "react";
export const useInjection = (connectionType, setProvider, setAccount, provider) => {
    const onChainChanged = useCallback((chainId) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`Chain changed to ${Number(chainId)}`);
        setProvider((p) => {
            if (p) {
                p.removeAllListeners("block");
                const newInjectedProvider = window.ethereum.removeAllListeners("chainChanged");
                return new ethers.providers.Web3Provider(newInjectedProvider.on("chainChanged", onChainChanged), "any");
            }
            else {
                return p;
            }
        });
    }), [setProvider]);
    const onAccountsChanged = useCallback((newAccount) => __awaiter(void 0, void 0, void 0, function* () {
        console.log(`Account changed to ${newAccount}`);
        (() => __awaiter(void 0, void 0, void 0, function* () {
            if (provider) {
                if (newAccount.length > 0) {
                    const signer = yield provider.getSigner();
                    const address = yield signer.getAddress();
                    const balance = yield signer.getBalance();
                    setAccount({
                        address,
                        signer,
                        balance: balance.toString(),
                        isLogged: true,
                        walletType: provider.connection.url,
                    });
                }
                else {
                    setAccount({});
                }
            }
        }))();
    }), [provider, setAccount]);
    useEffect(() => {
        if (connectionType === "injected") {
            try {
                let injectedProvider = window.ethereum.on("chainChanged", onChainChanged);
                injectedProvider = injectedProvider.on("accountsChanged", onAccountsChanged);
                setProvider((p) => {
                    if (!p) {
                        const web3Provider = new ethers.providers.Web3Provider(injectedProvider, "any");
                        return web3Provider;
                    }
                    else {
                        return p;
                    }
                });
            }
            catch (e) {
                console.warn(e);
            }
        }
    }, [connectionType, setProvider, onChainChanged, onAccountsChanged]);
};
