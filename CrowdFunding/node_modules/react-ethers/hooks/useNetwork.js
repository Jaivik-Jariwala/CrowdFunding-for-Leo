var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useEffect } from "react";
import { createNetworkInterface } from "../utils/createNetworkInterface";
export const useNetwork = (setProvider, setNetwork, provider, autoRefresh, chainId, customNetworks) => {
    useEffect(() => {
        if (provider !== null) {
            // For any provider
            ;
            (() => __awaiter(void 0, void 0, void 0, function* () {
                let network = yield provider._networkPromise;
                if (!network) {
                    network = provider._network;
                }
                const currentNetwork = createNetworkInterface(Number(network.chainId), customNetworks);
                setNetwork((n) => {
                    if (n.chainId !== currentNetwork.chainId) {
                        return currentNetwork;
                    }
                    else
                        return n;
                });
                if (autoRefresh) {
                    setProvider((p) => {
                        if (p && p.listeners("block").length === 0) {
                            return p.on("block", (blockNumber) => __awaiter(void 0, void 0, void 0, function* () {
                                console.log(`Block nÂ°${blockNumber} emitted on ${currentNetwork.name} (${currentNetwork.chainId})`);
                                setNetwork(Object.assign(Object.assign({}, currentNetwork), { blockHeight: blockNumber }));
                            }));
                        }
                        else {
                            return p;
                        }
                    });
                }
            }))();
        }
    }, [chainId, provider, customNetworks, setNetwork, autoRefresh, setProvider]);
};
