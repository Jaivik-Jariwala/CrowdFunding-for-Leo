{"version":3,"file":"index.cjs.js","sources":["../src/constants/values.ts","../src/constants/events.ts","../src/utils/misc.ts","../src/utils/deepLinks.ts","../src/providers/eip155.ts","../src/providers/solana.ts","../src/providers/cosmos.ts","../src/providers/cardano.ts","../src/providers/elrond.ts","../src/providers/multiversx.ts","../src/UniversalProvider.ts","../src/index.ts"],"sourcesContent":["export const LOGGER = \"error\";\n\nexport const RELAY_URL = \"wss://relay.walletconnect.com\";\n\nexport const PROTOCOL = \"wc\";\nexport const WC_VERSION = 2;\nexport const CONTEXT = \"universal_provider\";\n\nexport const STORAGE = `${PROTOCOL}@${WC_VERSION}:${CONTEXT}:`;\n\nexport const RPC_URL = \"https://rpc.walletconnect.com/v1\";\n","export const PROVIDER_EVENTS = {\n  DEFAULT_CHAIN_CHANGED: \"default_chain_changed\",\n};\n","import { SessionTypes } from \"@walletconnect/types\";\nimport { isValidObject } from \"@walletconnect/utils\";\nimport { RPC_URL } from \"../constants\";\nimport { Namespace, NamespaceConfig } from \"../types\";\n\nexport function getRpcUrl(chainId: string, rpc: Namespace, projectId?: string): string | undefined {\n  let rpcUrl: string | undefined;\n  const parsedChainId = getChainId(chainId);\n  if (rpc.rpcMap) {\n    rpcUrl = rpc.rpcMap[parsedChainId];\n  }\n\n  if (!rpcUrl) {\n    rpcUrl = `${RPC_URL}?chainId=eip155:${parsedChainId}&projectId=${projectId}`;\n  }\n  return rpcUrl;\n}\n\nexport function getChainId(chain: string): number {\n  return chain.includes(\"eip155\") ? Number(chain.split(\":\")[1]) : Number(chain);\n}\n\nexport function validateChainApproval(chain: string, chains: string[]): void {\n  if (!chains.includes(chain)) {\n    throw new Error(\n      `Chain '${chain}' not approved. Please use one of the following: ${chains.toString()}`,\n    );\n  }\n}\n\nexport function getChainsFromApprovedSession(accounts: string[]): string[] {\n  return accounts.map((address) => `${address.split(\":\")[0]}:${address.split(\":\")[1]}`);\n}\n\nexport function getAccountsFromSession(namespace: string, session: SessionTypes.Struct): string[] {\n  // match namespaces e.g. eip155 with eip155:1\n  const matchedNamespaceKeys = Object.keys(session.namespaces).filter((key) =>\n    key.includes(namespace),\n  );\n  if (!matchedNamespaceKeys.length) return [];\n  const accounts: string[] = [];\n  matchedNamespaceKeys.forEach((key) => {\n    const accountsForNamespace = session.namespaces[key].accounts;\n    accounts.push(...accountsForNamespace);\n  });\n  return accounts;\n}\n\nexport function mergeRequiredOptionalNamespaces(\n  required: NamespaceConfig,\n  optional: NamespaceConfig = {},\n) {\n  const requiredNamespaces = normalizeNamespaces(required);\n  const optionalNamespaces = normalizeNamespaces(optional);\n  return {\n    ...Object.assign(requiredNamespaces, optionalNamespaces),\n  };\n}\n\n/**\n * Converts\n * {\n *  \"eip155:1\": {...},\n *  \"eip155:2\": {...},\n * }\n * into\n * {\n *  \"eip155\": {\n *      chains: [\"eip155:1\", \"eip155:2\"],\n *      ...\n *    }\n * }\n *\n */\nexport function normalizeNamespaces(namespaces: NamespaceConfig): NamespaceConfig {\n  const normalizedNamespaces: NamespaceConfig = {};\n  if (!isValidObject(namespaces)) return normalizedNamespaces;\n\n  for (const [key, values] of Object.entries(namespaces)) {\n    const chains = isCaipNamespace(key) ? [key] : values.chains;\n    const methods = values.methods || [];\n    const events = values.events || [];\n    const normalizedKey = parseNamespaceKey(key);\n    normalizedNamespaces[normalizedKey] = {\n      chains: mergeArrays(chains, normalizedNamespaces[normalizedKey]?.chains),\n      methods: mergeArrays(methods, normalizedNamespaces[normalizedKey]?.methods),\n      events: mergeArrays(events, normalizedNamespaces[normalizedKey]?.events),\n      rpcMap: { ...normalizedNamespaces[normalizedKey]?.rpcMap, ...values.rpcMap },\n    };\n  }\n  return normalizedNamespaces;\n}\n\nexport function isCaipNamespace(namespace: string): boolean {\n  return namespace.includes(\":\");\n}\n\nexport function parseNamespaceKey(namespace: string) {\n  return isCaipNamespace(namespace) ? namespace.split(\":\")[0] : namespace;\n}\n\nexport function mergeArrays<T>(a: T[] = [], b: T[] = []): T[] {\n  return [...new Set([...a, ...b])];\n}\n","import { SignClient } from \"@walletconnect/sign-client\";\nimport { SignClientTypes } from \"@walletconnect/types\";\nimport { RequestParams } from \"../types\";\n\nexport const handleDeepLinks = (client: InstanceType<typeof SignClient>, params: RequestParams) => {\n  const handleSessionRequestSent = (\n    payload: SignClientTypes.EventArguments[\"session_request_sent\"],\n  ) => {\n    // only handle the request if it matches the request and topic\n    if (payload.request !== params.request || payload.topic !== params.topic) return;\n    client.events.removeListener(\"session_request_sent\", handleSessionRequestSent);\n    deeplinkRedirect(params);\n  };\n  client.on(\"session_request_sent\", handleSessionRequestSent);\n};\n\nexport function deeplinkRedirect(request: RequestParams) {\n  if (typeof window !== \"undefined\") {\n    try {\n      const item = window.localStorage.getItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      if (item) {\n        const json = JSON.parse(item);\n        const deeplink = json?.href;\n        if (typeof deeplink === \"string\") {\n          if (deeplink.endsWith(\"/\")) deeplink.slice(0, -1);\n          const link = `${deeplink}/wc?requestId=${request.id}&sessionTopic=${request.topic}`;\n          window.open(link, \"_self\", \"noreferrer noopener\");\n        }\n      }\n    } catch (err) {\n      // Silent error, just log in console\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n","import Client from \"@walletconnect/sign-client\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport { HttpConnection } from \"@walletconnect/jsonrpc-http-connection\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\n\nimport {\n  IProvider,\n  RpcProvidersMap,\n  SubProviderOpts,\n  RequestParams,\n  SessionNamespace,\n} from \"../types\";\n\nimport { getChainId, getRpcUrl, handleDeepLinks, validateChainApproval } from \"../utils\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\n\nclass Eip155Provider implements IProvider {\n  public name = \"eip155\";\n  public client: Client;\n  // the active chainId on the dapp\n  public chainId: number;\n  public namespace: SessionNamespace;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.client = opts.client;\n    this.events = opts.events;\n    this.httpProviders = this.createHttpProviders();\n    this.chainId = parseInt(this.getDefaultChain());\n  }\n\n  public async request<T = unknown>(args: RequestParams): Promise<T> {\n    switch (args.request.method) {\n      case \"eth_requestAccounts\":\n        return this.getAccounts() as any;\n      case \"eth_accounts\":\n        return this.getAccounts() as any;\n      case \"wallet_switchEthereumChain\": {\n        this.handleSwitchChain(args.request.params ? args.request.params[0]?.chainId : \"0x0\");\n        return null as any;\n      }\n      case \"eth_chainId\":\n        return parseInt(this.getDefaultChain()) as any;\n      default:\n        break;\n    }\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return await this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    const parsedChain = getChainId(chainId);\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[parsedChain]) {\n      const rpc =\n        rpcUrl ||\n        getRpcUrl(`${this.name}:${parsedChain}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${parsedChain}`);\n      }\n      this.setHttpProvider(parsedChain, rpc);\n    }\n    this.chainId = parsedChain;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${parsedChain}`);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId.toString();\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private createHttpProvider(\n    chainId: number,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc =\n      rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n\n  private setHttpProvider(chainId: number, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const parsedChain = getChainId(chain);\n      http[parsedChain] = this.createHttpProvider(parsedChain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = this.chainId;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private handleSwitchChain(newChainId: string) {\n    const chainId = parseInt(newChainId, 16);\n    const caipChainId = `${this.name}:${chainId}`;\n    validateChainApproval(caipChainId, this.namespace.chains);\n    this.setDefaultChain(`${chainId}`);\n  }\n}\n\nexport default Eip155Provider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\nclass SolanaProvider implements IProvider {\n  public name = \"solana\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc =\n        rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default SolanaProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\nclass CosmosProvider implements IProvider {\n  public name = \"cosmos\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc =\n        rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ---------------- PRIVATE ---------------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default CosmosProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { handleDeepLinks } from \"../utils\";\n\nclass CardanoProvider implements IProvider {\n  public name = \"cip34\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    this.chainId = chainId;\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc = rpcUrl || this.getCardanoRPCUrl(chainId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  // ------------- PRIVATE -------------- /\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      const rpcURL = this.getCardanoRPCUrl(chain);\n      http[chain] = this.createHttpProvider(chain, rpcURL);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private getCardanoRPCUrl(chainId: string): string | undefined {\n    const rpcMap = this.namespace.rpcMap;\n    if (!rpcMap) return undefined;\n    return rpcMap[chainId];\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || this.getCardanoRPCUrl(chainId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default CardanoProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\n// Old wallet connect provider for Elrond\nclass ElrondProvider implements IProvider {\n  public name = \"elrond\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc =\n        rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default ElrondProvider;\n","import HttpConnection from \"@walletconnect/jsonrpc-http-connection\";\nimport { JsonRpcProvider } from \"@walletconnect/jsonrpc-provider\";\nimport Client from \"@walletconnect/sign-client\";\nimport { EngineTypes, SessionTypes } from \"@walletconnect/types\";\nimport EventEmitter from \"events\";\nimport { PROVIDER_EVENTS } from \"../constants\";\nimport {\n  IProvider,\n  RequestParams,\n  RpcProvidersMap,\n  SessionNamespace,\n  SubProviderOpts,\n} from \"../types\";\nimport { getRpcUrl, handleDeepLinks } from \"../utils\";\n\nclass MultiversXProvider implements IProvider {\n  public name = \"multiversx\";\n  public client: Client;\n  public httpProviders: RpcProvidersMap;\n  public events: EventEmitter;\n  public namespace: SessionNamespace;\n  public chainId: string;\n\n  constructor(opts: SubProviderOpts) {\n    this.namespace = opts.namespace;\n    this.events = opts.events;\n    this.client = opts.client;\n    this.chainId = this.getDefaultChain();\n    this.httpProviders = this.createHttpProviders();\n  }\n\n  public updateNamespace(namespace: SessionTypes.Namespace) {\n    this.namespace = Object.assign(this.namespace, namespace);\n  }\n\n  public requestAccounts(): string[] {\n    return this.getAccounts();\n  }\n\n  public request<T = unknown>(args: RequestParams): Promise<T> {\n    if (this.namespace.methods.includes(args.request.method)) {\n      handleDeepLinks(this.client, args);\n      return this.client.request(args as EngineTypes.RequestParams);\n    }\n    return this.getHttpProvider().request(args.request);\n  }\n\n  public setDefaultChain(chainId: string, rpcUrl?: string | undefined) {\n    // http provider exists so just set the chainId\n    if (!this.httpProviders[chainId]) {\n      const rpc =\n        rpcUrl || getRpcUrl(`${this.name}:${chainId}`, this.namespace, this.client.core.projectId);\n      if (!rpc) {\n        throw new Error(`No RPC url provided for chainId: ${chainId}`);\n      }\n      this.setHttpProvider(chainId, rpc);\n    }\n    this.chainId = chainId;\n    this.events.emit(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, `${this.name}:${this.chainId}`);\n  }\n\n  public getDefaultChain(): string {\n    if (this.chainId) return this.chainId;\n    if (this.namespace.defaultChain) return this.namespace.defaultChain;\n\n    const chainId = this.namespace.chains[0];\n    if (!chainId) throw new Error(`ChainId not found`);\n\n    return chainId.split(\":\")[1];\n  }\n\n  // --------- PRIVATE --------- //\n\n  private getAccounts(): string[] {\n    const accounts = this.namespace.accounts;\n    if (!accounts) {\n      return [];\n    }\n\n    return [\n      ...new Set(\n        accounts\n          // get the accounts from the active chain\n          .filter((account) => account.split(\":\")[1] === this.chainId.toString())\n          // remove namespace & chainId from the string\n          .map((account) => account.split(\":\")[2]),\n      ),\n    ];\n  }\n\n  private createHttpProviders(): RpcProvidersMap {\n    const http = {};\n    this.namespace.chains.forEach((chain) => {\n      http[chain] = this.createHttpProvider(chain, this.namespace.rpcMap?.[chain]);\n    });\n    return http;\n  }\n\n  private getHttpProvider(): JsonRpcProvider {\n    const chain = `${this.name}:${this.chainId}`;\n    const http = this.httpProviders[chain];\n    if (typeof http === \"undefined\") {\n      throw new Error(`JSON-RPC provider for ${chain} not found`);\n    }\n    return http;\n  }\n\n  private setHttpProvider(chainId: string, rpcUrl?: string): void {\n    const http = this.createHttpProvider(chainId, rpcUrl);\n    if (http) {\n      this.httpProviders[chainId] = http;\n    }\n  }\n\n  private createHttpProvider(\n    chainId: string,\n    rpcUrl?: string | undefined,\n  ): JsonRpcProvider | undefined {\n    const rpc = rpcUrl || getRpcUrl(chainId, this.namespace, this.client.core.projectId);\n    if (typeof rpc === \"undefined\") return undefined;\n    const http = new JsonRpcProvider(new HttpConnection(rpc));\n    return http;\n  }\n}\n\nexport default MultiversXProvider;\n","import pino from \"pino\";\nimport SignClient, { PROPOSAL_EXPIRY_MESSAGE } from \"@walletconnect/sign-client\";\nimport { ProviderAccounts } from \"eip1193-provider\";\nimport { SessionTypes } from \"@walletconnect/types\";\nimport { getSdkError, isValidArray } from \"@walletconnect/utils\";\nimport { getDefaultLoggerOptions, Logger } from \"@walletconnect/logger\";\nimport Eip155Provider from \"./providers/eip155\";\nimport SolanaProvider from \"./providers/solana\";\nimport CosmosProvider from \"./providers/cosmos\";\nimport CardanoProvider from \"./providers/cardano\";\nimport ElrondProvider from \"./providers/elrond\";\nimport MultiversXProvider from \"./providers/multiversx\";\nimport {\n  getAccountsFromSession,\n  getChainsFromApprovedSession,\n  mergeRequiredOptionalNamespaces,\n  parseNamespaceKey,\n} from \"./utils\";\nimport {\n  IUniversalProvider,\n  IProvider,\n  RpcProviderMap,\n  ConnectParams,\n  RequestArguments,\n  UniversalProviderOpts,\n  NamespaceConfig,\n  PairingsCleanupOpts,\n} from \"./types\";\n\nimport { RELAY_URL, LOGGER, STORAGE, PROVIDER_EVENTS } from \"./constants\";\nimport EventEmitter from \"events\";\n\nexport class UniversalProvider implements IUniversalProvider {\n  public client!: SignClient;\n  public namespaces!: NamespaceConfig;\n  public optionalNamespaces?: NamespaceConfig;\n  public sessionProperties?: Record<string, string>;\n  public events: EventEmitter = new EventEmitter();\n  public rpcProviders: RpcProviderMap = {};\n  public session?: SessionTypes.Struct;\n  public providerOpts: UniversalProviderOpts;\n  public logger: Logger;\n  public uri: string | undefined;\n\n  private shouldAbortPairingAttempt = false;\n  private maxPairingAttempts = 10;\n\n  static async init(opts: UniversalProviderOpts) {\n    const provider = new UniversalProvider(opts);\n    await provider.initialize();\n    return provider;\n  }\n\n  constructor(opts: UniversalProviderOpts) {\n    this.providerOpts = opts;\n    this.logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || LOGGER }));\n  }\n\n  public async request<T = unknown>(\n    args: RequestArguments,\n    chain?: string | undefined,\n  ): Promise<T> {\n    const [namespace, chainId] = this.validateChain(chain);\n\n    if (!this.session) {\n      throw new Error(\"Please call connect() before request()\");\n    }\n\n    return await this.getProvider(namespace).request({\n      request: {\n        ...args,\n      },\n      chainId: `${namespace}:${chainId}`,\n      topic: this.session.topic,\n    });\n  }\n\n  public sendAsync(\n    args: RequestArguments,\n    callback: (error: Error | null, response: any) => void,\n    chain?: string | undefined,\n  ): void {\n    this.request(args, chain)\n      .then((response) => callback(null, response))\n      .catch((error) => callback(error, undefined));\n  }\n\n  public async enable(): Promise<ProviderAccounts> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    if (!this.session) {\n      await this.connect({\n        namespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n    }\n    const accounts = await this.requestAccounts();\n    return accounts as ProviderAccounts;\n  }\n\n  public async disconnect(): Promise<void> {\n    if (!this.session) {\n      throw new Error(\"Please call connect() before enable()\");\n    }\n    await this.client.disconnect({\n      topic: this.session?.topic,\n      reason: getSdkError(\"USER_DISCONNECTED\"),\n    });\n    await this.cleanup();\n  }\n\n  public async connect(opts: ConnectParams): Promise<SessionTypes.Struct | undefined> {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n    this.setNamespaces(opts);\n    await this.cleanupPendingPairings();\n    if (opts.skipPairing) return;\n\n    return await this.pair(opts.pairingTopic);\n  }\n\n  public on(event: any, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  get isWalletConnect() {\n    return true;\n  }\n\n  public async pair(pairingTopic: string | undefined): Promise<SessionTypes.Struct> {\n    this.shouldAbortPairingAttempt = false;\n    let pairingAttempts = 0;\n    do {\n      if (this.shouldAbortPairingAttempt) {\n        throw new Error(\"Pairing aborted\");\n      }\n\n      if (pairingAttempts >= this.maxPairingAttempts) {\n        throw new Error(\"Max auto pairing attempts reached\");\n      }\n\n      const { uri, approval } = await this.client.connect({\n        pairingTopic,\n        requiredNamespaces: this.namespaces,\n        optionalNamespaces: this.optionalNamespaces,\n        sessionProperties: this.sessionProperties,\n      });\n\n      if (uri) {\n        this.uri = uri;\n        this.events.emit(\"display_uri\", uri);\n      }\n\n      await approval()\n        .then((session) => {\n          this.session = session;\n        })\n        .catch((error) => {\n          if (error.message !== PROPOSAL_EXPIRY_MESSAGE) {\n            throw error;\n          }\n          pairingAttempts++;\n        });\n    } while (!this.session);\n    this.onConnect();\n    return this.session;\n  }\n\n  public setDefaultChain(chain: string, rpcUrl?: string | undefined) {\n    try {\n      const [namespace, chainId] = this.validateChain(chain);\n      this.getProvider(namespace).setDefaultChain(chainId, rpcUrl);\n    } catch (error) {\n      // ignore the error if the fx is used prematurely before namespaces are set\n      if (!/Please call connect/.test((error as Error).message)) throw error;\n    }\n  }\n\n  public async cleanupPendingPairings(opts: PairingsCleanupOpts = {}): Promise<void> {\n    this.logger.info(\"Cleaning up inactive pairings...\");\n    const inactivePairings = this.client.pairing.getAll();\n\n    if (!isValidArray(inactivePairings)) return;\n\n    for (const pairing of inactivePairings) {\n      if (opts.deletePairings) {\n        this.client.core.expirer.set(pairing.topic, 0);\n      } else {\n        await this.client.core.relayer.subscriber.unsubscribe(pairing.topic);\n      }\n    }\n\n    this.logger.info(`Inactive pairings cleared: ${inactivePairings.length}`);\n  }\n\n  public abortPairingAttempt() {\n    this.shouldAbortPairingAttempt = true;\n  }\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async checkStorage() {\n    this.namespaces = (await this.getFromStore(\"namespaces\")) || {};\n    this.optionalNamespaces = (await this.getFromStore(\"optionalNamespaces\")) || {};\n    if (this.client.session.length) {\n      const lastKeyIndex = this.client.session.keys.length - 1;\n      this.session = this.client.session.get(this.client.session.keys[lastKeyIndex]);\n      this.createProviders();\n    }\n  }\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    await this.createClient();\n    await this.checkStorage();\n    this.registerEventListeners();\n  }\n\n  private async createClient() {\n    this.client =\n      this.providerOpts.client ||\n      (await SignClient.init({\n        logger: this.providerOpts.logger || LOGGER,\n        relayUrl: this.providerOpts.relayUrl || RELAY_URL,\n        projectId: this.providerOpts.projectId,\n        metadata: this.providerOpts.metadata, // fetch metadata automatically if not provided?\n        storageOptions: this.providerOpts.storageOptions,\n        name: this.providerOpts.name,\n      }));\n\n    this.logger.trace(`SignClient Initialized`);\n  }\n\n  private createProviders(): void {\n    if (!this.client) {\n      throw new Error(\"Sign Client not initialized\");\n    }\n\n    if (!this.session) {\n      throw new Error(\"Session not initialized. Please call connect() before enable()\");\n    }\n\n    const providersToCreate = [\n      ...new Set(\n        Object.keys(this.session.namespaces).map((namespace) => parseNamespaceKey(namespace)),\n      ),\n    ];\n    providersToCreate.forEach((namespace) => {\n      if (!this.session) return;\n      const accounts = getAccountsFromSession(namespace, this.session);\n      const approvedChains = getChainsFromApprovedSession(accounts);\n      const mergedNamespaces = mergeRequiredOptionalNamespaces(\n        this.namespaces,\n        this.optionalNamespaces,\n      );\n      const combinedNamespace = {\n        ...mergedNamespaces[namespace],\n        accounts,\n        chains: approvedChains,\n      };\n      switch (namespace) {\n        case \"eip155\":\n          this.rpcProviders[namespace] = new Eip155Provider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"solana\":\n          this.rpcProviders[namespace] = new SolanaProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"cosmos\":\n          this.rpcProviders[namespace] = new CosmosProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"polkadot\":\n          //TODO:\n          break;\n        case \"cip34\":\n          this.rpcProviders[namespace] = new CardanoProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"elrond\":\n          this.rpcProviders[namespace] = new ElrondProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n        case \"multiversx\":\n          this.rpcProviders[namespace] = new MultiversXProvider({\n            client: this.client,\n            namespace: combinedNamespace,\n            events: this.events,\n          });\n          break;\n      }\n    });\n  }\n\n  private registerEventListeners(): void {\n    if (typeof this.client === \"undefined\") {\n      throw new Error(\"Sign Client is not initialized\");\n    }\n\n    this.client.on(\"session_ping\", (args) => {\n      this.events.emit(\"session_ping\", args);\n    });\n\n    this.client.on(\"session_event\", (args) => {\n      const { params } = args;\n      const { event } = params;\n      if (event.name === \"accountsChanged\") {\n        this.events.emit(\"accountsChanged\", event.data);\n      } else if (event.name === \"chainChanged\") {\n        this.onChainChanged(params.chainId);\n      } else {\n        this.events.emit(event.name, event.data);\n      }\n\n      this.events.emit(\"session_event\", args);\n    });\n\n    this.client.on(\"session_update\", ({ topic, params }) => {\n      const { namespaces } = params;\n      const _session = this.client?.session.get(topic);\n      this.session = { ..._session, namespaces } as SessionTypes.Struct;\n      this.onSessionUpdate();\n      this.events.emit(\"session_update\", { topic, params });\n    });\n\n    this.client.on(\"session_delete\", async (payload) => {\n      await this.cleanup();\n      this.events.emit(\"session_delete\", payload);\n      this.events.emit(\"disconnect\", {\n        ...getSdkError(\"USER_DISCONNECTED\"),\n        data: payload.topic,\n      });\n    });\n\n    this.on(PROVIDER_EVENTS.DEFAULT_CHAIN_CHANGED, (caip2ChainId: string) => {\n      this.onChainChanged(caip2ChainId, true);\n    });\n  }\n\n  private getProvider(namespace: string): IProvider {\n    if (!this.rpcProviders[namespace]) {\n      throw new Error(`Provider not found: ${namespace}`);\n    }\n    return this.rpcProviders[namespace];\n  }\n\n  private onSessionUpdate(): void {\n    Object.keys(this.rpcProviders).forEach((namespace: string) => {\n      this.getProvider(namespace).updateNamespace(\n        this.session?.namespaces[namespace] as SessionTypes.BaseNamespace,\n      );\n    });\n  }\n\n  private setNamespaces(params: ConnectParams): void {\n    const { namespaces, optionalNamespaces, sessionProperties } = params;\n    if (!namespaces || !Object.keys(namespaces).length) {\n      throw new Error(\"Namespaces must be not empty\");\n    }\n    this.namespaces = namespaces;\n    this.optionalNamespaces = optionalNamespaces;\n    this.sessionProperties = sessionProperties;\n    this.persist(\"namespaces\", namespaces);\n    this.persist(\"optionalNamespaces\", optionalNamespaces);\n  }\n\n  private validateChain(chain?: string): [string, string] {\n    const [namespace, chainId] = chain?.split(\":\") || [\"\", \"\"];\n    // validate namespace\n    if (namespace) {\n      if (!Object.keys(this.namespaces).includes(namespace)) {\n        throw new Error(\n          `Namespace '${namespace}' is not configured. Please call connect() first with namespace config.`,\n        );\n      }\n    }\n    if (namespace && chainId) {\n      return [namespace, chainId];\n    }\n    const defaultNamespace = Object.keys(this.namespaces)[0];\n    const defaultChain = this.rpcProviders[defaultNamespace].getDefaultChain();\n    return [defaultNamespace, defaultChain];\n  }\n\n  private async requestAccounts(): Promise<string[]> {\n    const [namespace] = this.validateChain();\n    return await this.getProvider(namespace).requestAccounts();\n  }\n\n  private onChainChanged(caip2Chain: string, internal = false): void {\n    const [namespace, chainId] = this.validateChain(caip2Chain);\n\n    if (!internal) {\n      this.getProvider(namespace).setDefaultChain(chainId);\n    }\n\n    this.namespaces[namespace].defaultChain = chainId;\n    this.persist(\"namespaces\", this.namespaces);\n    this.events.emit(\"chainChanged\", chainId);\n  }\n\n  private onConnect() {\n    this.createProviders();\n    this.events.emit(\"connect\", { session: this.session });\n  }\n\n  private async cleanup() {\n    this.session = undefined;\n    await this.cleanupPendingPairings({ deletePairings: true });\n  }\n\n  private persist(key: string, data: unknown) {\n    this.client.core.storage.setItem(`${STORAGE}/${key}`, data);\n  }\n\n  private async getFromStore(key: string) {\n    return await this.client.core.storage.getItem(`${STORAGE}/${key}`);\n  }\n}\nexport default UniversalProvider;\n","import { UniversalProvider as Provider } from \"./UniversalProvider\";\nexport * from \"./types\";\nexport const UniversalProvider = Provider;\nexport default Provider;\n"],"names":["h","u","c","chainId","rpc","projectId","rpcUrl","parsedChainId","RPC_URL","chain","chains","accounts","address","namespace","session","matchedNamespaceKeys","key","accountsForNamespace","required","optional","requiredNamespaces","optionalNamespaces","__spreadValues","namespaces","_a","_b","_c","_d","normalizedNamespaces","isValidObject","values","methods","events","normalizedKey","a","b","client","params","handleSessionRequestSent","payload","request","item","json","deeplink","link","err","Eip155Provider","opts","args","handleDeepLinks","parsedChain","getChainId","getRpcUrl","PROVIDER_EVENTS","JsonRpcProvider","HttpConnection","http","account","newChainId","caipChainId","validateChainApproval","SolanaProvider","CosmosProvider","CardanoProvider","rpcURL","rpcMap","ElrondProvider","MultiversXProvider","UniversalProvider","EventEmitter","pino","getDefaultLoggerOptions","LOGGER","provider","callback","response","error","getSdkError","event","listener","pairingTopic","pairingAttempts","uri","approval","PROPOSAL_EXPIRY_MESSAGE","inactivePairings","isValidArray","pairing","lastKeyIndex","SignClient","RELAY_URL","parseNamespaceKey","getAccountsFromSession","approvedChains","getChainsFromApprovedSession","mergedNamespaces","mergeRequiredOptionalNamespaces","combinedNamespace","__spreadProps","topic","_session","caip2ChainId","sessionProperties","defaultNamespace","defaultChain","caip2Chain","internal","data","STORAGE","Provider"],"mappings":"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"}