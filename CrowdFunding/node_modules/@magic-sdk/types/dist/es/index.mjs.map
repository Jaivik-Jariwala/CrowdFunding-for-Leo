{
  "version": 3,
  "sources": ["../../src/core/exception-types.ts", "../../src/core/json-rpc-types.ts", "../../src/core/message-types.ts", "../../src/modules/rpc-provider-types.ts"],
  "sourcesContent": ["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n", "import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n  data?: any;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\nexport interface UserInfo {\n  email?: string;\n}\n\nexport interface WalletInfo {\n  walletType: 'magic' | 'metamask' | 'coinbase_wallet' | 'wallet_connect';\n}\n\nexport interface RequestUserInfoScope {\n  scope?: {\n    email?: 'required' | 'optional';\n  };\n}\n\nexport interface NFTPurchaseRequest {\n  nft: {\n    name: string;\n    price: number;\n    currencyCode: string;\n    contractAddress: string;\n    collection?: string;\n    imageUrl?: string;\n  };\n  identityPrefill: {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string; // YYYY-MM-DD\n    emailAddress: string;\n    phone: string;\n    address: {\n      street1: string;\n      street2: string;\n      city: string;\n      regionCode: string;\n      postalCode: string;\n      countryCode: string;\n    };\n  };\n}\n\nexport type NFTPurchaseStatus = 'processed' | 'declined' | 'expired';\n\nexport interface NFTPurchaseResponse {\n  status: NFTPurchaseStatus;\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_auth_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n  IntermediaryEvent = 'magic_intermediary_event',\n  RequestAccounts = 'eth_requestAccounts',\n  GetInfo = 'mc_get_wallet_info',\n  ShowUI = 'mc_wallet',\n  NFTPurchase = 'magic_nft_purchase',\n  RequestUserInfoWithUI = 'mc_request_user_info',\n  Disconnect = 'mc_disconnect',\n  UpdatePhoneNumber = 'magic_auth_update_phone_number',\n  UpdatePhoneNumberTestMode = 'magic_auth_update_phone_number_testing_mode',\n  RecoverAccount = 'magic_auth_recover_account',\n  RecoverAccountTestMode = 'magic_auth_recover_account_testing_mode',\n}\n", "import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n", "export type EthNetworkName = 'mainnet' | 'goerli';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n"],
  "mappings": "AAAO,IAAKA,OACVA,EAAA,cAAgB,kBAChBA,EAAA,cAAgB,kBAChBA,EAAA,kBAAoB,qBACpBA,EAAA,gBAAkB,mBAClBA,EAAA,wBAA0B,4BAC1BA,EAAA,uBAAyB,0BANfA,OAAA,IASAC,OACVA,EAAA,eAAiB,mBACjBA,EAAA,gBAAkB,mBAClBA,EAAA,iCAAmC,sCACnCA,EAAA,kBAAoB,qBAJVA,OAAA,IAOAC,OAEVA,IAAA,WAAa,QAAb,aACAA,IAAA,eAAiB,QAAjB,iBACAA,IAAA,eAAiB,QAAjB,iBACAA,IAAA,cAAgB,QAAhB,gBACAA,IAAA,cAAgB,QAAhB,gBAGAA,IAAA,4BAA8B,MAA9B,8BACAA,IAAA,iBAAmB,QAAnB,mBACAA,IAAA,qBAAuB,QAAvB,uBACAA,IAAA,4BAA8B,QAA9B,8BACAA,IAAA,oBAAsB,QAAtB,sBACAA,IAAA,kBAAoB,QAApB,oBACAA,IAAA,qBAAuB,QAAvB,uBACAA,IAAA,kBAAoB,QAApB,oBACAA,IAAA,mBAAqB,QAArB,qBAjBUA,OAAA,ICwEL,IAAKC,OACVA,EAAA,aAAe,4BACfA,EAAA,kBAAoB,kCACpBA,EAAA,mBAAqB,mCACrBA,EAAA,oBAAsB,mCACtBA,EAAA,WAAa,0BACbA,EAAA,gBAAkB,+BAClBA,EAAA,YAAc,0BACdA,EAAA,WAAa,0BACbA,EAAA,OAAS,oBACTA,EAAA,YAAc,0BACdA,EAAA,aAAe,sBACfA,EAAA,qBAAuB,mCACvBA,EAAA,qBAAuB,yCACvBA,EAAA,0BAA4B,+CAC5BA,EAAA,2BAA6B,2CAC7BA,EAAA,4BAA8B,gDAC9BA,EAAA,mBAAqB,uCACrBA,EAAA,wBAA0B,4CAC1BA,EAAA,oBAAsB,uCACtBA,EAAA,mBAAqB,uCACrBA,EAAA,eAAiB,iCACjBA,EAAA,oBAAsB,uCACtBA,EAAA,kBAAoB,2BACpBA,EAAA,gBAAkB,sBAClBA,EAAA,QAAU,qBACVA,EAAA,OAAS,YACTA,EAAA,YAAc,qBACdA,EAAA,sBAAwB,uBACxBA,EAAA,WAAa,gBACbA,EAAA,kBAAoB,iCACpBA,EAAA,0BAA4B,8CAC5BA,EAAA,eAAiB,6BACjBA,EAAA,uBAAyB,0CAjCfA,OAAA,ICtFL,IAAKC,OACVA,EAAA,sBAAwB,wBACxBA,EAAA,oBAAsB,sBACtBA,EAAA,mBAAqB,qBACrBA,EAAA,mBAAqB,qBACrBA,EAAA,mBAAqB,qBALXA,OAAA,IAQAC,OACVA,EAAA,qBAAuB,uBADbA,OAAA,ICRL,IAAKC,OACVA,EAAA,QAAU,UADAA,OAAA",
  "names": ["SDKErrorCode", "SDKWarningCode", "RPCErrorCode", "MagicPayloadMethod", "MagicIncomingWindowMessage", "MagicOutgoingWindowMessage", "EthChainType"]
}
