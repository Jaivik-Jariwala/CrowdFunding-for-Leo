'use strict';

var basic = require('./basic-cf8743c1.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var wallets = require('@thirdweb-dev/wallets');
var reactCore = require('@thirdweb-dev/react-core');
var detectBrowser = require('detect-browser');
var styled = require('@emotion/styled');
var React = require('react');
var react = require('@emotion/react');
var ReactQrCode = require('react-qr-code');
var Dialog = require('@radix-ui/react-dialog');
var reactIcons = require('@radix-ui/react-icons');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);
var ReactQrCode__default = /*#__PURE__*/_interopDefault(ReactQrCode);

const FormFieldWithIconButton = props => {
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    children: [/*#__PURE__*/jsxRuntime.jsx(basic.Label, {
      htmlFor: props.id,
      children: props.label
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxRuntime.jsxs(basic.InputContainer, {
      "data-error": !!props.error,
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Input, {
        variant: "transparent",
        required: props.required,
        name: props.name,
        autoComplete: props.autocomplete,
        id: props.id,
        onChange: e => props.onChange(e.target.value),
        value: props.value,
        type: props.noSave ? "text" : props.type,
        style: props.type === "password" && props.noSave ? {
          WebkitTextSecurity: "disc"
        } : undefined,
        "data-test": props.dataTest
      }), /*#__PURE__*/jsxRuntime.jsx(basic.InputButton, {
        type: "button",
        onClick: props.right.onClick,
        children: props.right.icon
      })]
    }), props.error && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "sm"
      }), /*#__PURE__*/jsxRuntime.jsxs(basic.ErrorMessage, {
        children: [" ", props.error, " "]
      })]
    })]
  });
};
const FormField = props => {
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    children: [/*#__PURE__*/jsxRuntime.jsx(basic.Label, {
      htmlFor: props.id,
      children: props.label
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Input, {
      variant: "outline",
      required: props.required,
      name: props.name,
      autoComplete: props.autocomplete,
      id: props.id,
      onChange: e => props.onChange(e.target.value),
      value: props.value,
      type: props.type,
      "data-error": !!props.errorMessage,
      placeholder: props.placeholder,
      disabled: props.disabled
    }), props.errorMessage && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xs"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.ErrorMessage, {
        children: props.errorMessage
      })]
    })]
  });
};

const ModalTitle = styled__default["default"](Dialog.Title)`
  margin: 0;
  font-weight: 600;
  font-size: ${basic.fontSize.lg};
  color: ${p => p.theme.text.neutral};
  text-align: left;
  ${basic.media.mobile} {
    text-align: ${p => p.centerOnMobile ? "center" : "left"};
  }
`;
const ModalDescription = styled__default["default"].p`
  all: unset;
  display: block;
  font-size: ${p => p.sm ? basic.fontSize.sm : basic.fontSize.md};
  color: ${p => p.theme.text.secondary};
  line-height: 1.5;
  ${basic.media.mobile} {
    text-align: ${p => p.centerOnMobile ? "center" : "left"};
  }
`;
const BackButton = props => {
  return /*#__PURE__*/jsxRuntime.jsx(basic.IconButton, {
    variant: "secondary",
    onClick: props.onClick,
    style: props.style,
    type: "button",
    children: /*#__PURE__*/jsxRuntime.jsx(reactIcons.ChevronLeftIcon, {
      style: {
        width: basic.iconSize.md,
        height: basic.iconSize.md
      }
    })
  });
};
const HelperLink = styled__default["default"].a`
  all: unset;
  cursor: pointer;
  color: ${p => p.theme.link.primary};
  font-size: ${p => p.md ? basic.fontSize.md : basic.fontSize.sm};
  text-decoration: none;
  display: block;
  ${basic.media.mobile} {
    text-align: center;
  }
  &:hover {
    color: ${p => p.theme.link.primaryHover};
    text-decoration: none;
  }
`;

function detectEnv(userAgent) {
  return detectBrowser.detect(userAgent);
}

/**
 * @internal
 */
function isAndroid() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("android") : false;
}

/**
 * @internal
 */
function isIOS() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}

/**
 * @internal
 */
function detectOS() {
  const env = detectEnv();
  return env?.os ? env.os : undefined;
}

/**
 * @internal
 */
function isMobile() {
  const os = detectOS();
  return os ? isAndroid() || isIOS() : false;
}

const Img = props => {
  return /*#__PURE__*/jsxRuntime.jsx("img", {
    width: props.width,
    height: props.height,
    src: reactCore.resolveIpfsUri(props.src),
    alt: props.alt || "",
    loading: props.loading,
    decoding: "async",
    style: {
      height: props.height + "px",
      width: props.width + "px"
    },
    className: props.className
  });
};

const ConnectingScreen = props => {
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsxRuntime.jsx(IconContainer, {
      children: /*#__PURE__*/jsxRuntime.jsx(Img, {
        src: props.walletIconURL,
        width: basic.iconSize.xl,
        height: basic.iconSize.xl
      })
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsxs(TitleContainer, {
      children: [/*#__PURE__*/jsxRuntime.jsx(ModalTitle, {
        children: "Connecting your wallet"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spinner, {
        size: "md",
        color: "link"
      })]
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "md"
    }), /*#__PURE__*/jsxRuntime.jsxs(Desc, {
      centerOnMobile: true,
      children: ["Connect your wallet through the ", props.walletName, " ", isMobile() ? "application" : "pop-up"]
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsxs(HelperLink, {
      target: "_blank",
      href: props.supportLink,
      children: ["Having troubles connecting to ", props.walletName, "?"]
    })]
  });
};
const TitleContainer = styled__default["default"].div`
  display: flex;
  align-items: center;
  gap: ${basic.spacing.md};
  ${basic.media.mobile} {
    flex-direction: column;
    align-items: center;
    gap: ${basic.spacing.xl};
  }
`;
const IconContainer = styled__default["default"].div`
  display: flex;
  margin-top: ${basic.spacing.lg};
  ${basic.media.mobile} {
    justify-content: center;
    margin-top: 0;
  }
`;
const Desc = styled__default["default"](ModalDescription)`
  ${basic.media.mobile} {
    padding: 0 ${basic.spacing.lg};
  }
`;

const fadeInAnimation = react.keyframes`
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`;
const FadeIn = styled__default["default"].div`
  animation: ${fadeInAnimation} 0.15s ease-in;
`;

const Skeleton = props => {
  return /*#__PURE__*/jsxRuntime.jsx(SkeletonDiv, {
    gradient: props.gradient,
    style: {
      height: props.height,
      width: props.width || "auto"
    }
  });
};
const skeletonAnimation = react.keyframes`
0% {
    background-color: var(--skeleton-c-1);
  }
  100% {
    background-color: var(--skeleton-c-2);
  }
`;
const SkeletonDiv = styled__default["default"].div`
  background-size: 200% 200%;
  --skeleton-c-1: ${p => p.theme.bg[p.gradient?.c1 || "elevated"]};
  --skeleton-c-2: ${p => p.theme.bg[p.gradient?.c2 || "highlighted"]};
  animation: ${skeletonAnimation} 500ms ease-in-out infinite alternate;
  border-radius: ${basic.radius.sm};
`;

const QRCode = props => {
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    style: {
      position: "relative",
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    },
    children: [props.qrCodeUri ? /*#__PURE__*/jsxRuntime.jsx(FadeIn, {
      children: /*#__PURE__*/jsxRuntime.jsx(QRCodeContainer, {
        children: /*#__PURE__*/jsxRuntime.jsx(StyledReactQrCode, {
          value: props.qrCodeUri
        })
      })
    }) : /*#__PURE__*/jsxRuntime.jsx(QRSkeleton, {
      height: "200px",
      width: "200px"
    }), props.QRIcon && /*#__PURE__*/jsxRuntime.jsx(QrCodeIconContainer, {
      children: props.QRIcon
    })]
  });
};
const QrCodeIconContainer = styled__default["default"].div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: ${basic.radius.md};
  display: flex;
  justify-content: center;
  align-content: center;
  padding: 4px;
`;
const QRCodeContainer = styled__default["default"].div`
  background: white;
  padding: ${basic.spacing.xxs};
  display: flex;
  justify-content: center;
  align-content: center;
  border-radius: ${basic.radius.md};
  box-shadow: ${basic.shadow.md};
`;
const StyledReactQrCode = styled__default["default"](ReactQrCode__default["default"])`
  width: 200px;
  height: 200px;
  border-radius: ${basic.radius.md};

  ${basic.media.mobile} {
    width: 150px;
    height: 150px;
  }
`;
const QRSkeleton = styled__default["default"](Skeleton)`
  width: 200px;
  height: 200px;
  border-radius: ${basic.radius.md};
  ${basic.media.mobile} {
    width: 150px;
    height: 150px;
  }
`;

const Apple = "ipfs://Qmcyb1akWqyu8W4DgVWzZUozrCkfES8ow36jNhjs7arwvc/AppleGray.svg";
const Chrome = "ipfs://QmPu4UKsektZixeZN4ixi8Ji9KbMuwcRKAp3JRK4jrcaMK/Chrome.svg";
const GooglePlay = "ipfs://QmTSu87iXWpfcCgy15DX3Mgp1Rqb8zFAwXdbLNh6WxmpC4/GooglePlay.svg";

const GetStartedScreen = props => {
  const [showScreen, setShowScreen] = React.useState("base");
  const isScanScreen = showScreen === "android-scan" || showScreen === "ios-scan";
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(BackButton, {
      style: isScanScreen ? {
        position: "absolute",
        top: basic.spacing.lg,
        left: basic.spacing.lg
      } : undefined,
      onClick: () => {
        if (showScreen === "base") {
          props.onBack();
        } else {
          setShowScreen("base");
        }
      }
    }), showScreen === "android-scan" && props.googlePlayStoreLink && /*#__PURE__*/jsxRuntime.jsx(ScanScreen$1, {
      platformIcon: /*#__PURE__*/jsxRuntime.jsx(Img, {
        src: GooglePlay,
        width: basic.iconSize.md,
        height: basic.iconSize.md
      }),
      url: props.googlePlayStoreLink,
      platform: "Google Play",
      walletName: props.walletName,
      walletIconURL: props.walletIconURL
    }), showScreen === "ios-scan" && props.appleStoreLink && /*#__PURE__*/jsxRuntime.jsx(ScanScreen$1, {
      platformIcon: /*#__PURE__*/jsxRuntime.jsx(Img, {
        width: basic.iconSize.md,
        height: basic.iconSize.md,
        src: Apple
      }),
      url: props.appleStoreLink,
      platform: "App Store",
      walletName: props.walletName,
      walletIconURL: props.walletIconURL
    }), showScreen === "base" && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "lg"
      }), props.header || /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.jsx(Img, {
          src: props.walletIconURL,
          width: basic.iconSize.xl,
          height: basic.iconSize.xl,
          alt: ""
        }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
          y: "lg"
        }), /*#__PURE__*/jsxRuntime.jsxs(ModalTitle, {
          children: ["Get started with ", props.walletName]
        }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
          y: "sm"
        }), /*#__PURE__*/jsxRuntime.jsx(ModalDescription, {
          children: "Download your preferred option and refresh this page"
        })]
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsxs(basic.Flex, {
        flexDirection: "column",
        gap: "xs",
        children: [props.chromeExtensionLink && /*#__PURE__*/jsxRuntime.jsxs(ButtonLink, {
          onClick: () => {
            window.open(props.chromeExtensionLink, "_blank");
          },
          children: [/*#__PURE__*/jsxRuntime.jsx(Img, {
            width: basic.iconSize.lg,
            height: basic.iconSize.lg,
            src: Chrome
          }), /*#__PURE__*/jsxRuntime.jsx("span", {
            children: "Download Chrome Extension"
          })]
        }), props.googlePlayStoreLink && /*#__PURE__*/jsxRuntime.jsxs(ButtonLink, {
          as: "button",
          onClick: () => {
            if (isMobile()) {
              window.open(props.googlePlayStoreLink, "_blank");
            } else {
              setShowScreen("android-scan");
            }
          },
          children: [/*#__PURE__*/jsxRuntime.jsx(Img, {
            width: basic.iconSize.lg,
            height: basic.iconSize.lg,
            src: GooglePlay
          }), /*#__PURE__*/jsxRuntime.jsx("span", {
            children: "Download on Google Play"
          })]
        }), props.appleStoreLink && /*#__PURE__*/jsxRuntime.jsxs(ButtonLink, {
          as: "button",
          onClick: () => {
            if (isMobile()) {
              window.open(props.appleStoreLink, "_blank");
            } else {
              setShowScreen("ios-scan");
            }
          },
          children: [/*#__PURE__*/jsxRuntime.jsx(Img, {
            width: basic.iconSize.lg,
            height: basic.iconSize.lg,
            src: Apple
          }), /*#__PURE__*/jsxRuntime.jsx("span", {
            children: "Download on App Store"
          })]
        })]
      })]
    }), isScanScreen && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsxs(HelperLink, {
        as: "button",
        onClick: props.onBack,
        style: {
          textAlign: "center",
          display: "block",
          width: "100%"
        },
        children: ["I", `'`, "ve finished setting up my ", props.walletName, " on mobile"]
      })]
    }), !isScanScreen && props.footer]
  });
};
const ScanScreen$1 = props => {
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      textAlign: "center"
    },
    children: [/*#__PURE__*/jsxRuntime.jsx(QRCode, {
      qrCodeUri: props.url,
      QRIcon: /*#__PURE__*/jsxRuntime.jsx(Img, {
        src: props.walletIconURL,
        width: basic.iconSize.lg,
        height: basic.iconSize.lg
      })
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsxs("div", {
      style: {
        display: "flex",
        gap: basic.spacing.sm,
        alignItems: "center"
      },
      children: [props.platformIcon, /*#__PURE__*/jsxRuntime.jsxs(ModalTitle, {
        children: ["Install ", props.walletName, " on ", props.platform]
      })]
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsxs(ModalDescription, {
      children: ["Scan QR with your phone to download ", /*#__PURE__*/jsxRuntime.jsx("br", {}), " ", props.walletName, " for", " ", props.platform]
    })]
  });
};
const ButtonLink = styled__default["default"].button`
  all: unset;
  text-decoration: none;
  padding: ${basic.spacing.sm} ${basic.spacing.md};
  border-radius: ${basic.radius.sm};
  display: flex;
  align-items: center;
  gap: ${basic.spacing.md};
  cursor: pointer;
  box-sizing: border-box;
  width: 100%;
  color: ${p => p.theme.text.neutral};
  background: ${p => p.theme.bg.elevated};
  transition: 100ms ease;
  &:hover {
    background: ${p => p.theme.bg.highlighted};
    text-decoration: none;
    color: ${p => p.theme.text.neutral};
  }
`;

const ScanScreen = props => {
  const walletName = props.walletName.toLowerCase().includes("wallet") ? props.walletName : `${props.walletName} wallet`;
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [!props.hideBackButton && /*#__PURE__*/jsxRuntime.jsx(BackButton, {
      onClick: props.onBack,
      style: {
        position: "absolute",
        zIndex: 10,
        left: basic.spacing.lg,
        top: basic.spacing.lg
      }
    }), /*#__PURE__*/jsxRuntime.jsxs("div", {
      style: {
        textAlign: "center"
      },
      children: [/*#__PURE__*/jsxRuntime.jsx(QRCode, {
        qrCodeUri: props.qrCodeUri,
        QRIcon: /*#__PURE__*/jsxRuntime.jsx(Img, {
          width: basic.iconSize.lg,
          height: basic.iconSize.lg,
          src: props.walletIconURL
        })
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsxs(ModalTitle, {
        style: {
          textAlign: "center"
        },
        children: ["Scan with ", walletName, " "]
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "md"
      }), /*#__PURE__*/jsxRuntime.jsxs(ModalDescription, {
        children: ["Scan this QR code with your phone ", /*#__PURE__*/jsxRuntime.jsx("br", {}), "camera or ", walletName, " to connect"]
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "md"
      }), /*#__PURE__*/jsxRuntime.jsx("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        },
        children: /*#__PURE__*/jsxRuntime.jsx(basic.Spinner, {
          size: "md",
          color: "link"
        })
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsxs(LinkButton, {
        onClick: props.onGetStarted,
        children: [`Don't`, " have ", walletName, "?"]
      })]
    })]
  });
};
const LinkButton = styled__default["default"].button`
  all: unset;
  color: ${p => p.theme.link.primary};
  font-size: ${basic.fontSize.sm};
  cursor: pointer;
  &:hover {
    color: ${p => p.theme.link.primaryHover};
  }
`;

const CoinbaseScan = _ref => {
  let {
    walletConfig,
    onConnected,
    onGetStarted,
    onBack,
    hideBackButton
  } = _ref;
  const createInstance = reactCore.useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = React.useState(undefined);
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = reactCore.useWalletContext();
  const scanStarted = React.useRef(false);
  React.useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    (async () => {
      const wallet = createInstance(walletConfig);
      const uri = await wallet.getQrUrl();
      setQrCodeUri(uri || undefined);
      setConnectionStatus("connecting");
      try {
        await wallet.connect({
          chainId: chainToConnect?.chainId
        });
        setConnectedWallet(wallet);
        onConnected();
      } catch {
        setConnectionStatus("disconnected");
      }
    })();
  }, [createInstance, onConnected, walletConfig, chainToConnect?.chainId, setConnectedWallet, setConnectionStatus]);
  return /*#__PURE__*/jsxRuntime.jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    hideBackButton: hideBackButton
  });
};

const CoinbaseConnectUI = _ref => {
  let {
    walletConfig,
    close,
    goBack,
    supportedWallets
  } = _ref;
  const connect = reactCore.useConnect();
  const {
    meta
  } = walletConfig;
  const [screen, setScreen] = React.useState("loading");
  const connectPrompted = React.useRef(false);
  React.useEffect(() => {
    if (screen !== "loading") {
      return;
    }
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
          console.error(e);
        }
      }

      // if metamask is not injected
      else {
        if (isMobile()) {
          // coinbase will redirect to download page for coinbase wallet apps
          connect(walletConfig);
        } else {
          setScreen("scanning");
        }
      }
    })();
  }, [screen, walletConfig, close, connect, goBack]);
  if (screen === "connecting" || screen === "loading") {
    return /*#__PURE__*/jsxRuntime.jsx(ConnectingScreen, {
      onBack: goBack,
      walletName: meta.name,
      walletIconURL: meta.iconURL,
      supportLink: "https://help.coinbase.com/en/wallet/other-topics/troubleshooting-and-tips"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsxRuntime.jsx(GetStartedScreen, {
      walletIconURL: meta.iconURL,
      walletName: meta.name,
      chromeExtensionLink: meta.urls?.chrome,
      googlePlayStoreLink: meta.urls?.android,
      appleStoreLink: meta.urls?.ios,
      onBack: goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsxRuntime.jsx(CoinbaseScan, {
      onBack: goBack,
      onConnected: close,
      onGetStarted: () => setScreen("get-started"),
      walletConfig: walletConfig,
      hideBackButton: supportedWallets.length === 1
    });
  }
  return null;
};

const coinbaseWallet = () => {
  return {
    id: wallets.CoinbaseWallet.id,
    meta: {
      name: "Coinbase Wallet",
      iconURL: "ipfs://QmcJBHopbwfJcLqJpX2xEufSS84aLbF7bHavYhaXUcrLaH/coinbase.svg",
      urls: {
        chrome: "https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad",
        android: "https://play.google.com/store/apps/details?id=org.toshi",
        ios: "https://apps.apple.com/us/app/coinbase-wallet-nfts-crypto/id1278383455"
      }
    },
    create(options) {
      return new wallets.CoinbaseWallet({
        ...options,
        headlessMode: true
      });
    },
    connectUI: CoinbaseConnectUI,
    isInstalled() {
      if (wallets.assertWindowEthereum(globalThis.window)) {
        return globalThis.window.ethereum?.isCoinbaseWallet || globalThis.window.ethereum?.providers?.some(p => p.isCoinbaseWallet) || false;
      }
      return false;
    }
  };
};

var coinbaseWallet$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  coinbaseWallet: coinbaseWallet
});

const MetamaskScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig
  } = _ref;
  const createInstance = reactCore.useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = React.useState();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = reactCore.useWalletContext();
  const scanStarted = React.useRef(false);
  React.useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const metamask = createInstance(walletConfig);
    setConnectionStatus("connecting");
    metamask.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(metamask);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return /*#__PURE__*/jsxRuntime.jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL
  });
};

const MetamaskConnectUI = props => {
  const [screen, setScreen] = React.useState("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = reactCore.useConnect();
  const {
    goBack
  } = props;
  const connectPrompted = React.useRef(false);
  React.useEffect(() => {
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
        }
      }

      // if metamask is not injected
      else {
        // on mobile, open metamask app link
        if (isMobile()) {
          window.open(`https://metamask.app.link/dapp/${window.location.toString()}`);
        } else {
          // on desktop, show the metamask scan qr code
          setScreen("scanning");
        }
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsxRuntime.jsx(ConnectingScreen, {
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://support.metamask.io/hc/en-us/articles/4406430256539-User-Guide-Troubleshooting"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsxRuntime.jsx(GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: walletConfig.meta.urls?.chrome,
      googlePlayStoreLink: walletConfig.meta.urls?.android,
      appleStoreLink: walletConfig.meta.urls?.ios,
      onBack: props.goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsxRuntime.jsx(MetamaskScan, {
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      walletConfig: walletConfig
    });
  }
  return null;
};

const metamaskWallet = () => {
  return {
    id: wallets.MetaMaskWallet.id,
    meta: wallets.MetaMaskWallet.meta,
    create: options => {
      return new wallets.MetaMaskWallet({
        ...options,
        qrcode: false
      });
    },
    connectUI: MetamaskConnectUI,
    isInstalled() {
      if (wallets.assertWindowEthereum(globalThis.window)) {
        return globalThis.window.ethereum.isMetaMask;
      }
      return false;
    }
  };
};

var metamaskWallet$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  metamaskWallet: metamaskWallet
});

const walletConnectV1 = () => {
  return {
    id: wallets.WalletConnectV1.id,
    meta: wallets.WalletConnectV1.meta,
    create(options) {
      return new wallets.WalletConnectV1({
        ...options,
        qrcode: true
      });
    }
  };
};

var walletConnectV1$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  walletConnectV1: walletConnectV1
});

const defaultWallets = /* @__PURE__ */(() => [metamaskWallet(), coinbaseWallet(), walletConnectV1()])();

const WalletModalOpen = /* @__PURE__ */React.createContext(false);
const SetWalletModalOpen = /* @__PURE__ */React.createContext(undefined);
const ModalConfigCtx = /* @__PURE__ */React.createContext({
  title: "",
  theme: "dark",
  data: undefined
});
const SetModalConfigCtx = /* @__PURE__ */React.createContext(() => {});
const WalletUIStatesProvider = props => {
  const [isWalletModalOpen, setIsWalletModalOpen] = React.useState(false);
  const [modalConfig, setModalConfig] = React.useState({
    title: "Choose your wallet",
    theme: props.theme || "dark",
    data: undefined
  });
  return /*#__PURE__*/jsxRuntime.jsx(WalletModalOpen.Provider, {
    value: isWalletModalOpen,
    children: /*#__PURE__*/jsxRuntime.jsx(SetWalletModalOpen.Provider, {
      value: setIsWalletModalOpen,
      children: /*#__PURE__*/jsxRuntime.jsx(ModalConfigCtx.Provider, {
        value: modalConfig,
        children: /*#__PURE__*/jsxRuntime.jsx(SetModalConfigCtx.Provider, {
          value: setModalConfig,
          children: props.children
        })
      })
    })
  });
};
const useIsWalletModalOpen = () => {
  return React.useContext(WalletModalOpen);
};
const useSetIsWalletModalOpen = () => {
  const context = React.useContext(SetWalletModalOpen);
  if (context === undefined) {
    throw new Error("useSetWalletModalOpen must be used within a ThirdwebProvider");
  }
  return context;
};

const WalletSelector = props => {
  const localWalletInfo = props.walletConfigs.find(w => w.id === wallets.walletIds.localWallet);
  const walletConfigs = props.walletConfigs.filter(w => w.id !== wallets.walletIds.localWallet);
  const showGetStarted = !localWalletInfo && !!props.walletConfigs[0].meta.urls;
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsxs(ModalTitle, {
      children: [" ", props.title, " "]
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsx(WalletSelection, {
      walletConfigs: walletConfigs,
      selectWallet: props.selectWallet
    }), localWalletInfo && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Flex, {
        justifyContent: "center",
        children: /*#__PURE__*/jsxRuntime.jsx(basic.Button, {
          variant: "link",
          onClick: () => {
            props.selectWallet(localWalletInfo);
          },
          "data-test": "continue-as-guest-button",
          children: "Continue as guest"
        })
      })]
    }), showGetStarted && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsx(HelperLink, {
        as: "button",
        onClick: props.onGetStarted,
        style: {
          display: "block",
          width: "100%",
          textAlign: "center"
        },
        children: "Need help getting started?"
      })]
    })]
  });
};
const WalletSelection = props => {
  const modalConfig = React.useContext(ModalConfigCtx);
  const setModalConfig = React.useContext(SetModalConfigCtx);
  const walletConfigs = props.walletConfigs
  // show the installed wallets first
  .sort((a, b) => {
    const aInstalled = a.isInstalled ? a.isInstalled() : false;
    const bInstalled = b.isInstalled ? b.isInstalled() : false;
    if (aInstalled && !bInstalled) {
      return -1;
    }
    if (!aInstalled && bInstalled) {
      return 1;
    }
    return 0;
  })
  // show the wallets with selectUI first before others
  .sort((a, b) => {
    if (a.selectUI && !b.selectUI) {
      return -1;
    }
    if (!a.selectUI && b.selectUI) {
      return 1;
    }
    return 0;
  });
  return /*#__PURE__*/jsxRuntime.jsx(WalletList, {
    children: walletConfigs.map(walletConfig => {
      const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;
      return /*#__PURE__*/jsxRuntime.jsx("li", {
        children: walletConfig.selectUI ? /*#__PURE__*/jsxRuntime.jsx(walletConfig.selectUI, {
          theme: modalConfig.theme,
          supportedWallets: props.walletConfigs,
          onSelect: data => {
            props.selectWallet(walletConfig);
            setModalConfig(config => ({
              ...config,
              data
            }));
          },
          walletConfig: walletConfig
        }) : /*#__PURE__*/jsxRuntime.jsxs(WalletButton, {
          type: "button",
          onClick: () => {
            props.selectWallet(walletConfig);
          },
          children: [/*#__PURE__*/jsxRuntime.jsx(Img, {
            src: walletConfig.meta.iconURL,
            width: basic.iconSize.lg,
            height: basic.iconSize.lg,
            loading: "eager"
          }), /*#__PURE__*/jsxRuntime.jsx(WalletName, {
            children: walletConfig.meta.name
          }), isInstalled && /*#__PURE__*/jsxRuntime.jsx(InstallBadge, {
            children: " Installed "
          })]
        })
      }, walletConfig.id);
    })
  });
};
const WalletList = styled__default["default"].ul`
  all: unset;
  list-style-type: none;
  display: flex;
  flex-direction: column;
  gap: ${basic.spacing.xs};
  box-sizing: border-box;
`;
const WalletButton = styled__default["default"].button`
  all: unset;
  padding: ${basic.spacing.sm} ${basic.spacing.md};
  border-radius: ${basic.radius.sm};
  display: flex;
  align-items: center;
  gap: ${basic.spacing.md};
  cursor: pointer;
  box-sizing: border-box;
  width: 100%;
  color: ${p => p.theme.text.neutral};
  background: ${p => p.theme.bg.elevated};
  transition: 100ms ease;
  &:hover {
    background: ${p => p.theme.bg.highlighted};
  }
`;
const InstallBadge = styled__default["default"].span`
  padding: ${basic.spacing.xxs} ${basic.spacing.xs};
  font-size: ${basic.fontSize.xs};
  background-color: ${p => p.theme.badge.secondary};
  border-radius: ${basic.radius.lg};
  margin-left: auto;
`;
const WalletName = styled__default["default"].span`
  font-size: ${basic.fontSize.md};
  font-weight: 500;
`;

/**
 *
 * @returns `true` if the wallet does not have a UI and can sign transactions without user interaction.
 */
function useIsHeadlessWallet() {
  const activeWallet = reactCore.useWallet();
  if (!activeWallet) {
    return false;
  }
  const id = activeWallet.walletId;
  return id === wallets.walletIds.localWallet || id === wallets.walletIds.paper || id === wallets.walletIds.magicLink;
}

const HeadlessConnectUI = _ref => {
  let {
    close,
    walletConfig,
    open,
    supportedWallets
  } = _ref;
  const connect = reactCore.useConnect();
  const prompted = React.useRef(false);
  const singleWallet = supportedWallets.length === 1;
  React.useEffect(() => {
    if (prompted.current) {
      return;
    }
    prompted.current = true;
    (async () => {
      close();
      try {
        await connect(walletConfig);
      } catch (e) {
        if (!singleWallet) {
          open();
        }
        console.error(e);
      }
    })();
  }, [walletConfig, connect, close, open, singleWallet]);
  return null;
};

exports.BackButton = BackButton;
exports.ButtonLink = ButtonLink;
exports.ConnectingScreen = ConnectingScreen;
exports.FormField = FormField;
exports.FormFieldWithIconButton = FormFieldWithIconButton;
exports.GetStartedScreen = GetStartedScreen;
exports.HeadlessConnectUI = HeadlessConnectUI;
exports.HelperLink = HelperLink;
exports.Img = Img;
exports.ModalConfigCtx = ModalConfigCtx;
exports.ModalDescription = ModalDescription;
exports.ModalTitle = ModalTitle;
exports.ScanScreen = ScanScreen;
exports.SetModalConfigCtx = SetModalConfigCtx;
exports.Skeleton = Skeleton;
exports.WalletSelection = WalletSelection;
exports.WalletSelector = WalletSelector;
exports.WalletUIStatesProvider = WalletUIStatesProvider;
exports.coinbaseWallet = coinbaseWallet;
exports.coinbaseWallet$1 = coinbaseWallet$1;
exports.defaultWallets = defaultWallets;
exports.fadeInAnimation = fadeInAnimation;
exports.isMobile = isMobile;
exports.metamaskWallet = metamaskWallet;
exports.metamaskWallet$1 = metamaskWallet$1;
exports.useIsHeadlessWallet = useIsHeadlessWallet;
exports.useIsWalletModalOpen = useIsWalletModalOpen;
exports.useSetIsWalletModalOpen = useSetIsWalletModalOpen;
exports.walletConnectV1 = walletConnectV1;
exports.walletConnectV1$1 = walletConnectV1$1;
