'use strict';

var wallets = require('@thirdweb-dev/wallets');
var reactCore = require('@thirdweb-dev/react-core');
var coinbaseWallet = require('./headlessConnectUI-37c9fce2.cjs.dev.js');
var React = require('react');
var styled = require('@emotion/styled');
var basic = require('./basic-cf8743c1.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
var reactIcons = require('@radix-ui/react-icons');
var ethers = require('ethers');
require('detect-browser');
require('@emotion/react');
require('react-qr-code');
require('@radix-ui/react-dialog');
require('@radix-ui/colors');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);

function Steps(_ref) {
  let {
    step
  } = _ref;
  return /*#__PURE__*/jsxRuntime.jsxs(StepContainer, {
    children: [/*#__PURE__*/jsxRuntime.jsx(Circle, {
      "data-active": true
    }), /*#__PURE__*/jsxRuntime.jsx(Line, {
      "data-active": step === 2
    }), /*#__PURE__*/jsxRuntime.jsx(Circle, {
      "data-active": step === 2
    })]
  });
}
const StepContainer = styled__default["default"].div`
  display: flex;
  align-items: center;
  width: 130px;
  padding: ${basic.spacing.xs};
`;
const Circle = styled__default["default"].div`
  width: 14px;
  height: 14px;
  border-radius: 50%;
  background-color: ${p => p.theme.bg.highlighted};
  box-shadow: 0 0 0 3px ${p => p.theme.bg.base},
    0 0 0 5px ${p => p.theme.bg.highlighted};

  &[data-active="true"] {
    background-color: ${p => p.theme.link.primary};
    box-shadow: 0 0 0 3px ${p => p.theme.bg.base},
      0 0 0 5px ${p => p.theme.link.primary};

    position: relative;
    z-index: 2;
  }
`;
const Line = styled__default["default"].div`
  flex-grow: 1;
  height: 4px;
  background-color: ${p => p.theme.bg.highlighted};
  &[data-active="true"] {
    background-color: ${p => p.theme.link.primary};
  }
`;

const SelectpersonalWallet = props => {
  const guestWallet = props.personalWallets.find(w => w.id === wallets.walletIds.localWallet);
  const personalWallets = props.personalWallets.filter(w => w.id !== wallets.walletIds.localWallet);
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [props.renderBackButton && /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsxRuntime.jsx(IconContainer, {
      children: /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.Img, {
        src: props.safeWallet.meta.iconURL,
        width: basic.iconSize.xl,
        height: basic.iconSize.xl
      })
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ModalTitle, {
      children: "Link Personal Wallet"
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ModalDescription, {
      children: "Select a personal wallet to connect to your Safe"
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsx(Steps, {
      step: 1
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.WalletSelection, {
      walletConfigs: personalWallets,
      selectWallet: props.selectWallet
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), guestWallet ? /*#__PURE__*/jsxRuntime.jsx(basic.Flex, {
      justifyContent: "center",
      children: /*#__PURE__*/jsxRuntime.jsx(basic.Button, {
        variant: "link",
        onClick: () => {
          props.selectWallet(guestWallet);
        },
        "data-test": "continue-as-guest-button",
        children: "Continue as guest"
      })
    }) : /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.HelperLink, {
      target: "_blank",
      href: "https://docs.safe.global/learn/what-is-a-smart-contract-account",
      style: {
        textAlign: "center"
      },
      children: "What is a Safe?"
    })]
  });
};
const IconContainer = styled__default["default"].div`
  margin-top: ${basic.spacing.lg};
`;

const gnosisAddressPrefixToChainId = {
  eth: 1,
  matic: 137,
  avax: 43114,
  bnb: 56,
  oeth: 10,
  gor: 5
};
const SelectAccount = props => {
  const activeWallet = reactCore.useWallet();
  const connect = reactCore.useConnect();
  const activeChain = reactCore.useChain();
  const connectedChainId = reactCore.useChainId();
  const [safeAddress, setSafeAddress] = React.useState("");
  const [safeChainId, setSafeChainId] = React.useState(-1);
  const [safeConnectError, setSafeConnectError] = React.useState(false);
  const [switchError, setSwitchError] = React.useState(false);
  const [switchingNetwork, setSwitchingNetwork] = React.useState(false);
  const connectionStatus = reactCore.useConnectionStatus();
  const requiresConfirmation = !coinbaseWallet.useIsHeadlessWallet();
  const chains = reactCore.useSupportedChains();

  // put supported chains first
  const supportedChains = chains.filter(c => wallets.SafeSupportedChainsSet.has(c.chainId));
  const selectedSafeChain = supportedChains.find(c => c.chainId === safeChainId);
  const testnets = supportedChains.filter(c => c.testnet);
  const mainnets = supportedChains.filter(c => !c.testnet);

  // if there are more than one mainnet and testnet, group them
  const useOptGroup = mainnets.length > 0 && testnets.length > 0;
  const handleSubmit = async () => {
    if (!selectedSafeChain || !activeWallet || !activeChain) {
      return;
    }
    setSafeConnectError(false);
    try {
      await connect(props.safeWalletConfig, {
        chain: selectedSafeChain,
        personalWallet: activeWallet,
        safeAddress
      });
      props.onConnect();
    } catch (e) {
      console.error(e);
      setSafeConnectError(true);
    }
  };
  const mismatch = safeChainId !== -1 && connectedChainId !== safeChainId;
  const isValidAddress = ethers.utils.isAddress(safeAddress);
  const disableNetworkSelection = supportedChains.length === 1;
  const switchChain = reactCore.useSwitchChain();
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "md"
    }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.Img, {
      src: props.safeWalletConfig.meta.iconURL,
      width: basic.iconSize.xl,
      height: basic.iconSize.xl
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ModalTitle, {
      children: "Enter your Safe Address & Network "
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "md"
    }), /*#__PURE__*/jsxRuntime.jsxs(coinbaseWallet.ModalDescription, {
      children: ["You can find your safe address in", " ", /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.HelperLink, {
        target: "_blank",
        href: "https://app.safe.global/home",
        style: {
          display: "inline"
        },
        children: "Safe Dashboard"
      })]
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsx(Steps, {
      step: 2
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsxs("form", {
      onSubmit: e => {
        e.preventDefault();
        handleSubmit();
      },
      children: [/*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.FormField, {
        name: "safeAddress",
        id: "safeAddress",
        errorMessage: safeAddress && !isValidAddress ? "Invalid Safe Address" : undefined,
        autocomplete: "on",
        onChange: value => {
          setSafeConnectError(false);
          if (value.length > 4) {
            const prefix = value.split(":")[0];
            if (prefix && prefix in gnosisAddressPrefixToChainId) {
              setSafeChainId(gnosisAddressPrefixToChainId[prefix]);
              setSafeAddress(value.slice(prefix.length + 1));
            } else {
              setSafeAddress(value);
            }
          } else {
            setSafeAddress(value);
          }
        },
        label: "Safe Address",
        type: "text",
        value: safeAddress,
        required: true,
        placeholder: "0x123..."
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "lg"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Label, {
        htmlFor: "safeNetwork",
        children: "Safe Network"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xs"
      }), /*#__PURE__*/jsxRuntime.jsxs("div", {
        style: {
          position: "relative"
        },
        children: [/*#__PURE__*/jsxRuntime.jsxs(NetworkSelect, {
          "data-error": supportedChains.length === 0,
          required: true,
          name: "safeNetwork",
          id: "safeNetwork",
          value: safeChainId,
          disabled: disableNetworkSelection,
          placeholder: "Select Network your safe is deployed to",
          onChange: e => {
            setSafeConnectError(false);
            setSwitchError(false);
            setSafeChainId(Number(e.target.value));
          },
          children: [!disableNetworkSelection && /*#__PURE__*/jsxRuntime.jsx("option", {
            value: "",
            hidden: true,
            children: "Select network your safe is deployed on"
          }), useOptGroup ? /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
            children: [/*#__PURE__*/jsxRuntime.jsx("optgroup", {
              label: "Mainnets",
              children: mainnets.map(chain => {
                return /*#__PURE__*/jsxRuntime.jsx("option", {
                  value: chain.chainId,
                  children: chain.name
                }, chain.chainId);
              })
            }), /*#__PURE__*/jsxRuntime.jsx("optgroup", {
              label: "Testnets",
              children: testnets.map(chain => {
                return /*#__PURE__*/jsxRuntime.jsx("option", {
                  value: chain.chainId,
                  children: chain.name
                }, chain.chainId);
              })
            })]
          }) : supportedChains.map(chain => {
            return /*#__PURE__*/jsxRuntime.jsx("option", {
              value: chain.chainId,
              children: chain.name
            }, chain.chainId);
          })]
        }), !disableNetworkSelection && /*#__PURE__*/jsxRuntime.jsx(StyledChevronDownIcon, {
          width: basic.iconSize.sm,
          height: basic.iconSize.sm,
          style: {
            position: "absolute",
            top: "50%",
            right: basic.spacing.sm,
            transform: "translateY(-50%)",
            pointerEvents: "none"
          }
        })]
      }), supportedChains.length === 0 && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
        children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
          y: "sm"
        }), /*#__PURE__*/jsxRuntime.jsxs(basic.ErrorMessage, {
          children: [" ", "Can not use Safe: No Safe supported chains are configured in App"]
        })]
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "sm"
      }), safeConnectError && /*#__PURE__*/jsxRuntime.jsxs(basic.ErrorMessage, {
        style: {
          display: "flex",
          gap: basic.spacing.sm,
          alignItems: "center",
          fontSize: basic.fontSize.sm
        },
        children: [/*#__PURE__*/jsxRuntime.jsx(reactIcons.ExclamationTriangleIcon, {
          width: basic.iconSize.sm,
          height: basic.iconSize.sm
        }), /*#__PURE__*/jsxRuntime.jsxs("span", {
          children: ["Could not connect to Safe. ", /*#__PURE__*/jsxRuntime.jsx("br", {}), "Make sure safe address and network are correct."]
        })]
      }), switchError && /*#__PURE__*/jsxRuntime.jsxs(basic.ErrorMessage, {
        style: {
          display: "flex",
          gap: basic.spacing.sm,
          alignItems: "center",
          fontSize: basic.fontSize.sm
        },
        children: [/*#__PURE__*/jsxRuntime.jsx(reactIcons.ExclamationTriangleIcon, {
          width: basic.iconSize.sm,
          height: basic.iconSize.sm
        }), /*#__PURE__*/jsxRuntime.jsx("span", {
          children: "Failed to switch network."
        })]
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxRuntime.jsx("div", {
        style: {
          display: "flex",
          justifyContent: "flex-end"
        },
        children: mismatch ? /*#__PURE__*/jsxRuntime.jsxs(basic.Button, {
          type: "button",
          variant: "secondary",
          style: {
            display: "flex",
            alignItems: "center",
            gap: basic.spacing.sm
          },
          onClick: async () => {
            if (!activeWallet) {
              throw new Error("No active wallet");
            }
            setSafeConnectError(false);
            setSwitchError(false);
            setSwitchingNetwork(true);
            try {
              await switchChain(safeChainId);
            } catch (e) {
              setSwitchError(true);
            } finally {
              setSwitchingNetwork(false);
            }
          },
          children: [" ", switchingNetwork ? "Switching" : "Switch Network", switchingNetwork && /*#__PURE__*/jsxRuntime.jsx(basic.Spinner, {
            size: "sm",
            color: "primary"
          })]
        }) : /*#__PURE__*/jsxRuntime.jsxs(basic.Button, {
          variant: "inverted",
          type: "submit",
          style: {
            display: "flex",
            alignItems: "center",
            gap: basic.spacing.sm
          },
          children: [connectionStatus === "connecting" ? "Connecting" : "Connect to Safe", connectionStatus === "connecting" && /*#__PURE__*/jsxRuntime.jsx(basic.Spinner, {
            size: "sm",
            color: "inverted"
          })]
        })
      }), switchingNetwork && requiresConfirmation && /*#__PURE__*/jsxRuntime.jsx(ConfirmMessage, {
        children: " Confirm in your wallet "
      })]
    })]
  });
};
const ConfirmMessage = styled__default["default"].p`
  font-size: ${basic.fontSize.sm};
  color: ${p => p.theme.link.primary};
  text-align: right;
`;
const NetworkSelect = styled__default["default"].select`
  width: 100%;
  padding: ${basic.spacing.sm};
  box-sizing: border-box;
  outline: none;
  border: none;
  border-radius: 6px;
  color: ${p => p.theme.text.neutral};
  background: transparent;
  font-size: ${basic.fontSize.md};
  box-shadow: 0 0 0 1.5px ${p => p.theme.input.outline};
  appearance: none;

  &:focus {
    box-shadow: 0 0 0 2px ${p => p.theme.input.focusRing};
  }

  &:invalid {
    color: ${p => p.theme.text.secondary};
  }
  &[data-error="true"] {
    box-shadow: 0 0 0 1.5px ${p => p.theme.input.errorRing};
  }

  &[disabled] {
    opacity: 1;
    cursor: not-allowed;
  }
`;
const StyledChevronDownIcon = styled__default["default"](reactIcons.ChevronDownIcon)`
  color: ${p => p.theme.icon.secondary};
`;

const safeWallet = config => {
  const personalWallets = config?.personalWallets || coinbaseWallet.defaultWallets;
  return {
    id: wallets.SafeWallet.id,
    meta: wallets.SafeWallet.meta,
    create: options => new wallets.SafeWallet({
      ...options
    }),
    connectUI(props) {
      return /*#__PURE__*/jsxRuntime.jsx(SafeConnectUI, {
        ...props,
        personalWallets: personalWallets
      });
    },
    isInstalled() {
      return false;
    },
    personalWallets: personalWallets
  };
};
const SafeConnectUI = props => {
  const activeWallet = reactCore.useWallet();
  const [personalWalletConfig, setPersonalWalletConfig] = React.useState();
  const disconnect = reactCore.useDisconnect();
  if (personalWalletConfig) {
    const _props = {
      close: () => {
        setPersonalWalletConfig(undefined);
        props.close(false); // do not reset
      },

      goBack: () => {
        setPersonalWalletConfig(undefined);
      },
      isOpen: props.isOpen,
      open: props.open,
      theme: props.theme,
      walletConfig: personalWalletConfig,
      supportedWallets: props.personalWallets,
      selectionData: props.selectionData,
      setSelectionData: props.setSelectionData
    };
    if (personalWalletConfig.connectUI) {
      return /*#__PURE__*/jsxRuntime.jsx(personalWalletConfig.connectUI, {
        ..._props
      });
    }
    return /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.HeadlessConnectUI, {
      ..._props
    });
  }
  if (!activeWallet) {
    return /*#__PURE__*/jsxRuntime.jsx(SelectpersonalWallet, {
      personalWallets: props.personalWallets,
      onBack: props.goBack,
      safeWallet: props.walletConfig,
      selectWallet: setPersonalWalletConfig,
      renderBackButton: props.supportedWallets.length > 1
    });
  }
  return /*#__PURE__*/jsxRuntime.jsx(SelectAccount, {
    onBack: disconnect,
    onConnect: props.close,
    safeWalletConfig: props.walletConfig
  });
};

exports.SafeConnectUI = SafeConnectUI;
exports.safeWallet = safeWallet;
