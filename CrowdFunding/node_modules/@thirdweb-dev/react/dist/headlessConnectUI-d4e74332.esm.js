import { L as Label, S as Spacer, I as Input, E as ErrorMessage, c as InputContainer, d as InputButton, f as fontSize, m as media, e as IconButton, i as iconSize, s as spacing, b as Spinner, r as radius, g as shadow, a as Flex, B as Button } from './basic-d06569f8.esm.js';
import { jsxs, jsx, Fragment } from 'react/jsx-runtime';
import { CoinbaseWallet, assertWindowEthereum, MetaMaskWallet, WalletConnectV1, walletIds } from '@thirdweb-dev/wallets';
import { resolveIpfsUri, useCreateWalletInstance, useWalletContext, useConnect, useWallet } from '@thirdweb-dev/react-core';
import { detect } from 'detect-browser';
import styled from '@emotion/styled';
import { useState, useRef, useEffect, useContext, createContext } from 'react';
import { keyframes } from '@emotion/react';
import ReactQrCode from 'react-qr-code';
import { Title } from '@radix-ui/react-dialog';
import { ChevronLeftIcon } from '@radix-ui/react-icons';

const FormFieldWithIconButton = props => {
  return /*#__PURE__*/jsxs("div", {
    children: [/*#__PURE__*/jsx(Label, {
      htmlFor: props.id,
      children: props.label
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsxs(InputContainer, {
      "data-error": !!props.error,
      children: [/*#__PURE__*/jsx(Input, {
        variant: "transparent",
        required: props.required,
        name: props.name,
        autoComplete: props.autocomplete,
        id: props.id,
        onChange: e => props.onChange(e.target.value),
        value: props.value,
        type: props.noSave ? "text" : props.type,
        style: props.type === "password" && props.noSave ? {
          WebkitTextSecurity: "disc"
        } : undefined,
        "data-test": props.dataTest
      }), /*#__PURE__*/jsx(InputButton, {
        type: "button",
        onClick: props.right.onClick,
        children: props.right.icon
      })]
    }), props.error && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "sm"
      }), /*#__PURE__*/jsxs(ErrorMessage, {
        children: [" ", props.error, " "]
      })]
    })]
  });
};
const FormField = props => {
  return /*#__PURE__*/jsxs("div", {
    children: [/*#__PURE__*/jsx(Label, {
      htmlFor: props.id,
      children: props.label
    }), /*#__PURE__*/jsx(Spacer, {
      y: "sm"
    }), /*#__PURE__*/jsx(Input, {
      variant: "outline",
      required: props.required,
      name: props.name,
      autoComplete: props.autocomplete,
      id: props.id,
      onChange: e => props.onChange(e.target.value),
      value: props.value,
      type: props.type,
      "data-error": !!props.errorMessage,
      placeholder: props.placeholder,
      disabled: props.disabled
    }), props.errorMessage && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xs"
      }), /*#__PURE__*/jsx(ErrorMessage, {
        children: props.errorMessage
      })]
    })]
  });
};

const ModalTitle = styled(Title)`
  margin: 0;
  font-weight: 600;
  font-size: ${fontSize.lg};
  color: ${p => p.theme.text.neutral};
  text-align: left;
  ${media.mobile} {
    text-align: ${p => p.centerOnMobile ? "center" : "left"};
  }
`;
const ModalDescription = styled.p`
  all: unset;
  display: block;
  font-size: ${p => p.sm ? fontSize.sm : fontSize.md};
  color: ${p => p.theme.text.secondary};
  line-height: 1.5;
  ${media.mobile} {
    text-align: ${p => p.centerOnMobile ? "center" : "left"};
  }
`;
const BackButton = props => {
  return /*#__PURE__*/jsx(IconButton, {
    variant: "secondary",
    onClick: props.onClick,
    style: props.style,
    type: "button",
    children: /*#__PURE__*/jsx(ChevronLeftIcon, {
      style: {
        width: iconSize.md,
        height: iconSize.md
      }
    })
  });
};
const HelperLink = styled.a`
  all: unset;
  cursor: pointer;
  color: ${p => p.theme.link.primary};
  font-size: ${p => p.md ? fontSize.md : fontSize.sm};
  text-decoration: none;
  display: block;
  ${media.mobile} {
    text-align: center;
  }
  &:hover {
    color: ${p => p.theme.link.primaryHover};
    text-decoration: none;
  }
`;

function detectEnv(userAgent) {
  return detect(userAgent);
}

/**
 * @internal
 */
function isAndroid() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("android") : false;
}

/**
 * @internal
 */
function isIOS() {
  const os = detectOS();
  return os ? os.toLowerCase().includes("ios") || os.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 : false;
}

/**
 * @internal
 */
function detectOS() {
  const env = detectEnv();
  return env?.os ? env.os : undefined;
}

/**
 * @internal
 */
function isMobile() {
  const os = detectOS();
  return os ? isAndroid() || isIOS() : false;
}

const Img = props => {
  return /*#__PURE__*/jsx("img", {
    width: props.width,
    height: props.height,
    src: resolveIpfsUri(props.src),
    alt: props.alt || "",
    loading: props.loading,
    decoding: "async",
    style: {
      height: props.height + "px",
      width: props.width + "px"
    },
    className: props.className
  });
};

const ConnectingScreen = props => {
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack
    }), /*#__PURE__*/jsx(IconContainer, {
      children: /*#__PURE__*/jsx(Img, {
        src: props.walletIconURL,
        width: iconSize.xl,
        height: iconSize.xl
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs(TitleContainer, {
      children: [/*#__PURE__*/jsx(ModalTitle, {
        children: "Connecting your wallet"
      }), /*#__PURE__*/jsx(Spinner, {
        size: "md",
        color: "link"
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "md"
    }), /*#__PURE__*/jsxs(Desc, {
      centerOnMobile: true,
      children: ["Connect your wallet through the ", props.walletName, " ", isMobile() ? "application" : "pop-up"]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxs(HelperLink, {
      target: "_blank",
      href: props.supportLink,
      children: ["Having troubles connecting to ", props.walletName, "?"]
    })]
  });
};
const TitleContainer = styled.div`
  display: flex;
  align-items: center;
  gap: ${spacing.md};
  ${media.mobile} {
    flex-direction: column;
    align-items: center;
    gap: ${spacing.xl};
  }
`;
const IconContainer = styled.div`
  display: flex;
  margin-top: ${spacing.lg};
  ${media.mobile} {
    justify-content: center;
    margin-top: 0;
  }
`;
const Desc = styled(ModalDescription)`
  ${media.mobile} {
    padding: 0 ${spacing.lg};
  }
`;

const fadeInAnimation = keyframes`
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
`;
const FadeIn = styled.div`
  animation: ${fadeInAnimation} 0.15s ease-in;
`;

const Skeleton = props => {
  return /*#__PURE__*/jsx(SkeletonDiv, {
    gradient: props.gradient,
    style: {
      height: props.height,
      width: props.width || "auto"
    }
  });
};
const skeletonAnimation = keyframes`
0% {
    background-color: var(--skeleton-c-1);
  }
  100% {
    background-color: var(--skeleton-c-2);
  }
`;
const SkeletonDiv = styled.div`
  background-size: 200% 200%;
  --skeleton-c-1: ${p => p.theme.bg[p.gradient?.c1 || "elevated"]};
  --skeleton-c-2: ${p => p.theme.bg[p.gradient?.c2 || "highlighted"]};
  animation: ${skeletonAnimation} 500ms ease-in-out infinite alternate;
  border-radius: ${radius.sm};
`;

const QRCode = props => {
  return /*#__PURE__*/jsxs("div", {
    style: {
      position: "relative",
      display: "flex",
      justifyContent: "center",
      alignItems: "center"
    },
    children: [props.qrCodeUri ? /*#__PURE__*/jsx(FadeIn, {
      children: /*#__PURE__*/jsx(QRCodeContainer, {
        children: /*#__PURE__*/jsx(StyledReactQrCode, {
          value: props.qrCodeUri
        })
      })
    }) : /*#__PURE__*/jsx(QRSkeleton, {
      height: "200px",
      width: "200px"
    }), props.QRIcon && /*#__PURE__*/jsx(QrCodeIconContainer, {
      children: props.QRIcon
    })]
  });
};
const QrCodeIconContainer = styled.div`
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: ${radius.md};
  display: flex;
  justify-content: center;
  align-content: center;
  padding: 4px;
`;
const QRCodeContainer = styled.div`
  background: white;
  padding: ${spacing.xxs};
  display: flex;
  justify-content: center;
  align-content: center;
  border-radius: ${radius.md};
  box-shadow: ${shadow.md};
`;
const StyledReactQrCode = styled(ReactQrCode)`
  width: 200px;
  height: 200px;
  border-radius: ${radius.md};

  ${media.mobile} {
    width: 150px;
    height: 150px;
  }
`;
const QRSkeleton = styled(Skeleton)`
  width: 200px;
  height: 200px;
  border-radius: ${radius.md};
  ${media.mobile} {
    width: 150px;
    height: 150px;
  }
`;

const Apple = "ipfs://Qmcyb1akWqyu8W4DgVWzZUozrCkfES8ow36jNhjs7arwvc/AppleGray.svg";
const Chrome = "ipfs://QmPu4UKsektZixeZN4ixi8Ji9KbMuwcRKAp3JRK4jrcaMK/Chrome.svg";
const GooglePlay = "ipfs://QmTSu87iXWpfcCgy15DX3Mgp1Rqb8zFAwXdbLNh6WxmpC4/GooglePlay.svg";

const GetStartedScreen = props => {
  const [showScreen, setShowScreen] = useState("base");
  const isScanScreen = showScreen === "android-scan" || showScreen === "ios-scan";
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsx(BackButton, {
      style: isScanScreen ? {
        position: "absolute",
        top: spacing.lg,
        left: spacing.lg
      } : undefined,
      onClick: () => {
        if (showScreen === "base") {
          props.onBack();
        } else {
          setShowScreen("base");
        }
      }
    }), showScreen === "android-scan" && props.googlePlayStoreLink && /*#__PURE__*/jsx(ScanScreen$1, {
      platformIcon: /*#__PURE__*/jsx(Img, {
        src: GooglePlay,
        width: iconSize.md,
        height: iconSize.md
      }),
      url: props.googlePlayStoreLink,
      platform: "Google Play",
      walletName: props.walletName,
      walletIconURL: props.walletIconURL
    }), showScreen === "ios-scan" && props.appleStoreLink && /*#__PURE__*/jsx(ScanScreen$1, {
      platformIcon: /*#__PURE__*/jsx(Img, {
        width: iconSize.md,
        height: iconSize.md,
        src: Apple
      }),
      url: props.appleStoreLink,
      platform: "App Store",
      walletName: props.walletName,
      walletIconURL: props.walletIconURL
    }), showScreen === "base" && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "lg"
      }), props.header || /*#__PURE__*/jsxs(Fragment, {
        children: [/*#__PURE__*/jsx(Img, {
          src: props.walletIconURL,
          width: iconSize.xl,
          height: iconSize.xl,
          alt: ""
        }), /*#__PURE__*/jsx(Spacer, {
          y: "lg"
        }), /*#__PURE__*/jsxs(ModalTitle, {
          children: ["Get started with ", props.walletName]
        }), /*#__PURE__*/jsx(Spacer, {
          y: "sm"
        }), /*#__PURE__*/jsx(ModalDescription, {
          children: "Download your preferred option and refresh this page"
        })]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(Flex, {
        flexDirection: "column",
        gap: "xs",
        children: [props.chromeExtensionLink && /*#__PURE__*/jsxs(ButtonLink, {
          onClick: () => {
            window.open(props.chromeExtensionLink, "_blank");
          },
          children: [/*#__PURE__*/jsx(Img, {
            width: iconSize.lg,
            height: iconSize.lg,
            src: Chrome
          }), /*#__PURE__*/jsx("span", {
            children: "Download Chrome Extension"
          })]
        }), props.googlePlayStoreLink && /*#__PURE__*/jsxs(ButtonLink, {
          as: "button",
          onClick: () => {
            if (isMobile()) {
              window.open(props.googlePlayStoreLink, "_blank");
            } else {
              setShowScreen("android-scan");
            }
          },
          children: [/*#__PURE__*/jsx(Img, {
            width: iconSize.lg,
            height: iconSize.lg,
            src: GooglePlay
          }), /*#__PURE__*/jsx("span", {
            children: "Download on Google Play"
          })]
        }), props.appleStoreLink && /*#__PURE__*/jsxs(ButtonLink, {
          as: "button",
          onClick: () => {
            if (isMobile()) {
              window.open(props.appleStoreLink, "_blank");
            } else {
              setShowScreen("ios-scan");
            }
          },
          children: [/*#__PURE__*/jsx(Img, {
            width: iconSize.lg,
            height: iconSize.lg,
            src: Apple
          }), /*#__PURE__*/jsx("span", {
            children: "Download on App Store"
          })]
        })]
      })]
    }), isScanScreen && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(HelperLink, {
        as: "button",
        onClick: props.onBack,
        style: {
          textAlign: "center",
          display: "block",
          width: "100%"
        },
        children: ["I", `'`, "ve finished setting up my ", props.walletName, " on mobile"]
      })]
    }), !isScanScreen && props.footer]
  });
};
const ScanScreen$1 = props => {
  return /*#__PURE__*/jsxs("div", {
    style: {
      display: "flex",
      flexDirection: "column",
      alignItems: "center",
      textAlign: "center"
    },
    children: [/*#__PURE__*/jsx(QRCode, {
      qrCodeUri: props.url,
      QRIcon: /*#__PURE__*/jsx(Img, {
        src: props.walletIconURL,
        width: iconSize.lg,
        height: iconSize.lg
      })
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxs("div", {
      style: {
        display: "flex",
        gap: spacing.sm,
        alignItems: "center"
      },
      children: [props.platformIcon, /*#__PURE__*/jsxs(ModalTitle, {
        children: ["Install ", props.walletName, " on ", props.platform]
      })]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxs(ModalDescription, {
      children: ["Scan QR with your phone to download ", /*#__PURE__*/jsx("br", {}), " ", props.walletName, " for", " ", props.platform]
    })]
  });
};
const ButtonLink = styled.button`
  all: unset;
  text-decoration: none;
  padding: ${spacing.sm} ${spacing.md};
  border-radius: ${radius.sm};
  display: flex;
  align-items: center;
  gap: ${spacing.md};
  cursor: pointer;
  box-sizing: border-box;
  width: 100%;
  color: ${p => p.theme.text.neutral};
  background: ${p => p.theme.bg.elevated};
  transition: 100ms ease;
  &:hover {
    background: ${p => p.theme.bg.highlighted};
    text-decoration: none;
    color: ${p => p.theme.text.neutral};
  }
`;

const ScanScreen = props => {
  const walletName = props.walletName.toLowerCase().includes("wallet") ? props.walletName : `${props.walletName} wallet`;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [!props.hideBackButton && /*#__PURE__*/jsx(BackButton, {
      onClick: props.onBack,
      style: {
        position: "absolute",
        zIndex: 10,
        left: spacing.lg,
        top: spacing.lg
      }
    }), /*#__PURE__*/jsxs("div", {
      style: {
        textAlign: "center"
      },
      children: [/*#__PURE__*/jsx(QRCode, {
        qrCodeUri: props.qrCodeUri,
        QRIcon: /*#__PURE__*/jsx(Img, {
          width: iconSize.lg,
          height: iconSize.lg,
          src: props.walletIconURL
        })
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(ModalTitle, {
        style: {
          textAlign: "center"
        },
        children: ["Scan with ", walletName, " "]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "md"
      }), /*#__PURE__*/jsxs(ModalDescription, {
        children: ["Scan this QR code with your phone ", /*#__PURE__*/jsx("br", {}), "camera or ", walletName, " to connect"]
      }), /*#__PURE__*/jsx(Spacer, {
        y: "md"
      }), /*#__PURE__*/jsx("div", {
        style: {
          display: "flex",
          justifyContent: "center"
        },
        children: /*#__PURE__*/jsx(Spinner, {
          size: "md",
          color: "link"
        })
      }), /*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsxs(LinkButton, {
        onClick: props.onGetStarted,
        children: [`Don't`, " have ", walletName, "?"]
      })]
    })]
  });
};
const LinkButton = styled.button`
  all: unset;
  color: ${p => p.theme.link.primary};
  font-size: ${fontSize.sm};
  cursor: pointer;
  &:hover {
    color: ${p => p.theme.link.primaryHover};
  }
`;

const CoinbaseScan = _ref => {
  let {
    walletConfig,
    onConnected,
    onGetStarted,
    onBack,
    hideBackButton
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState(undefined);
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const scanStarted = useRef(false);
  useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    (async () => {
      const wallet = createInstance(walletConfig);
      const uri = await wallet.getQrUrl();
      setQrCodeUri(uri || undefined);
      setConnectionStatus("connecting");
      try {
        await wallet.connect({
          chainId: chainToConnect?.chainId
        });
        setConnectedWallet(wallet);
        onConnected();
      } catch {
        setConnectionStatus("disconnected");
      }
    })();
  }, [createInstance, onConnected, walletConfig, chainToConnect?.chainId, setConnectedWallet, setConnectionStatus]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL,
    hideBackButton: hideBackButton
  });
};

const CoinbaseConnectUI = _ref => {
  let {
    walletConfig,
    close,
    goBack,
    supportedWallets
  } = _ref;
  const connect = useConnect();
  const {
    meta
  } = walletConfig;
  const [screen, setScreen] = useState("loading");
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (screen !== "loading") {
      return;
    }
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
          console.error(e);
        }
      }

      // if metamask is not injected
      else {
        if (isMobile()) {
          // coinbase will redirect to download page for coinbase wallet apps
          connect(walletConfig);
        } else {
          setScreen("scanning");
        }
      }
    })();
  }, [screen, walletConfig, close, connect, goBack]);
  if (screen === "connecting" || screen === "loading") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      onBack: goBack,
      walletName: meta.name,
      walletIconURL: meta.iconURL,
      supportLink: "https://help.coinbase.com/en/wallet/other-topics/troubleshooting-and-tips"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: meta.iconURL,
      walletName: meta.name,
      chromeExtensionLink: meta.urls?.chrome,
      googlePlayStoreLink: meta.urls?.android,
      appleStoreLink: meta.urls?.ios,
      onBack: goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(CoinbaseScan, {
      onBack: goBack,
      onConnected: close,
      onGetStarted: () => setScreen("get-started"),
      walletConfig: walletConfig,
      hideBackButton: supportedWallets.length === 1
    });
  }
  return null;
};

const coinbaseWallet = () => {
  return {
    id: CoinbaseWallet.id,
    meta: {
      name: "Coinbase Wallet",
      iconURL: "ipfs://QmcJBHopbwfJcLqJpX2xEufSS84aLbF7bHavYhaXUcrLaH/coinbase.svg",
      urls: {
        chrome: "https://chrome.google.com/webstore/detail/coinbase-wallet-extension/hnfanknocfeofbddgcijnmhnfnkdnaad",
        android: "https://play.google.com/store/apps/details?id=org.toshi",
        ios: "https://apps.apple.com/us/app/coinbase-wallet-nfts-crypto/id1278383455"
      }
    },
    create(options) {
      return new CoinbaseWallet({
        ...options,
        headlessMode: true
      });
    },
    connectUI: CoinbaseConnectUI,
    isInstalled() {
      if (assertWindowEthereum(globalThis.window)) {
        return globalThis.window.ethereum?.isCoinbaseWallet || globalThis.window.ethereum?.providers?.some(p => p.isCoinbaseWallet) || false;
      }
      return false;
    }
  };
};

var coinbaseWallet$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  coinbaseWallet: coinbaseWallet
});

const MetamaskScan = _ref => {
  let {
    onBack,
    onConnected,
    onGetStarted,
    walletConfig
  } = _ref;
  const createInstance = useCreateWalletInstance();
  const [qrCodeUri, setQrCodeUri] = useState();
  const {
    setConnectedWallet,
    chainToConnect,
    setConnectionStatus
  } = useWalletContext();
  const scanStarted = useRef(false);
  useEffect(() => {
    if (scanStarted.current) {
      return;
    }
    scanStarted.current = true;
    const metamask = createInstance(walletConfig);
    setConnectionStatus("connecting");
    metamask.connectWithQrCode({
      chainId: chainToConnect?.chainId,
      onQrCodeUri(uri) {
        setQrCodeUri(uri);
      },
      onConnected() {
        setConnectedWallet(metamask);
        onConnected();
      }
    });
  }, [createInstance, setConnectedWallet, chainToConnect, onConnected, walletConfig, setConnectionStatus]);
  return /*#__PURE__*/jsx(ScanScreen, {
    onBack: onBack,
    onGetStarted: onGetStarted,
    qrCodeUri: qrCodeUri,
    walletName: walletConfig.meta.name,
    walletIconURL: walletConfig.meta.iconURL
  });
};

const MetamaskConnectUI = props => {
  const [screen, setScreen] = useState("connecting");
  const {
    walletConfig,
    close
  } = props;
  const connect = useConnect();
  const {
    goBack
  } = props;
  const connectPrompted = useRef(false);
  useEffect(() => {
    if (connectPrompted.current) {
      return;
    }
    const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;

    // if loading
    (async () => {
      if (isInstalled) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          goBack();
        }
      }

      // if metamask is not injected
      else {
        // on mobile, open metamask app link
        if (isMobile()) {
          window.open(`https://metamask.app.link/dapp/${window.location.toString()}`);
        } else {
          // on desktop, show the metamask scan qr code
          setScreen("scanning");
        }
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsx(ConnectingScreen, {
      onBack: props.goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: "https://support.metamask.io/hc/en-us/articles/4406430256539-User-Guide-Troubleshooting"
    });
  }
  if (screen === "get-started") {
    return /*#__PURE__*/jsx(GetStartedScreen, {
      walletIconURL: walletConfig.meta.iconURL,
      walletName: walletConfig.meta.name,
      chromeExtensionLink: walletConfig.meta.urls?.chrome,
      googlePlayStoreLink: walletConfig.meta.urls?.android,
      appleStoreLink: walletConfig.meta.urls?.ios,
      onBack: props.goBack
    });
  }
  if (screen === "scanning") {
    return /*#__PURE__*/jsx(MetamaskScan, {
      onBack: props.goBack,
      onConnected: close,
      onGetStarted: () => {
        setScreen("get-started");
      },
      walletConfig: walletConfig
    });
  }
  return null;
};

const metamaskWallet = () => {
  return {
    id: MetaMaskWallet.id,
    meta: MetaMaskWallet.meta,
    create: options => {
      return new MetaMaskWallet({
        ...options,
        qrcode: false
      });
    },
    connectUI: MetamaskConnectUI,
    isInstalled() {
      if (assertWindowEthereum(globalThis.window)) {
        return globalThis.window.ethereum.isMetaMask;
      }
      return false;
    }
  };
};

var metamaskWallet$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  metamaskWallet: metamaskWallet
});

const walletConnectV1 = () => {
  return {
    id: WalletConnectV1.id,
    meta: WalletConnectV1.meta,
    create(options) {
      return new WalletConnectV1({
        ...options,
        qrcode: true
      });
    }
  };
};

var walletConnectV1$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  walletConnectV1: walletConnectV1
});

const defaultWallets = /* @__PURE__ */(() => [metamaskWallet(), coinbaseWallet(), walletConnectV1()])();

const WalletModalOpen = /* @__PURE__ */createContext(false);
const SetWalletModalOpen = /* @__PURE__ */createContext(undefined);
const ModalConfigCtx = /* @__PURE__ */createContext({
  title: "",
  theme: "dark",
  data: undefined
});
const SetModalConfigCtx = /* @__PURE__ */createContext(() => {});
const WalletUIStatesProvider = props => {
  const [isWalletModalOpen, setIsWalletModalOpen] = useState(false);
  const [modalConfig, setModalConfig] = useState({
    title: "Choose your wallet",
    theme: props.theme || "dark",
    data: undefined
  });
  return /*#__PURE__*/jsx(WalletModalOpen.Provider, {
    value: isWalletModalOpen,
    children: /*#__PURE__*/jsx(SetWalletModalOpen.Provider, {
      value: setIsWalletModalOpen,
      children: /*#__PURE__*/jsx(ModalConfigCtx.Provider, {
        value: modalConfig,
        children: /*#__PURE__*/jsx(SetModalConfigCtx.Provider, {
          value: setModalConfig,
          children: props.children
        })
      })
    })
  });
};
const useIsWalletModalOpen = () => {
  return useContext(WalletModalOpen);
};
const useSetIsWalletModalOpen = () => {
  const context = useContext(SetWalletModalOpen);
  if (context === undefined) {
    throw new Error("useSetWalletModalOpen must be used within a ThirdwebProvider");
  }
  return context;
};

const WalletSelector = props => {
  const localWalletInfo = props.walletConfigs.find(w => w.id === walletIds.localWallet);
  const walletConfigs = props.walletConfigs.filter(w => w.id !== walletIds.localWallet);
  const showGetStarted = !localWalletInfo && !!props.walletConfigs[0].meta.urls;
  return /*#__PURE__*/jsxs(Fragment, {
    children: [/*#__PURE__*/jsxs(ModalTitle, {
      children: [" ", props.title, " "]
    }), /*#__PURE__*/jsx(Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsx(WalletSelection, {
      walletConfigs: walletConfigs,
      selectWallet: props.selectWallet
    }), localWalletInfo && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsx(Flex, {
        justifyContent: "center",
        children: /*#__PURE__*/jsx(Button, {
          variant: "link",
          onClick: () => {
            props.selectWallet(localWalletInfo);
          },
          "data-test": "continue-as-guest-button",
          children: "Continue as guest"
        })
      })]
    }), showGetStarted && /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(Spacer, {
        y: "xl"
      }), /*#__PURE__*/jsx(HelperLink, {
        as: "button",
        onClick: props.onGetStarted,
        style: {
          display: "block",
          width: "100%",
          textAlign: "center"
        },
        children: "Need help getting started?"
      })]
    })]
  });
};
const WalletSelection = props => {
  const modalConfig = useContext(ModalConfigCtx);
  const setModalConfig = useContext(SetModalConfigCtx);
  const walletConfigs = props.walletConfigs
  // show the installed wallets first
  .sort((a, b) => {
    const aInstalled = a.isInstalled ? a.isInstalled() : false;
    const bInstalled = b.isInstalled ? b.isInstalled() : false;
    if (aInstalled && !bInstalled) {
      return -1;
    }
    if (!aInstalled && bInstalled) {
      return 1;
    }
    return 0;
  })
  // show the wallets with selectUI first before others
  .sort((a, b) => {
    if (a.selectUI && !b.selectUI) {
      return -1;
    }
    if (!a.selectUI && b.selectUI) {
      return 1;
    }
    return 0;
  });
  return /*#__PURE__*/jsx(WalletList, {
    children: walletConfigs.map(walletConfig => {
      const isInstalled = walletConfig.isInstalled ? walletConfig.isInstalled() : false;
      return /*#__PURE__*/jsx("li", {
        children: walletConfig.selectUI ? /*#__PURE__*/jsx(walletConfig.selectUI, {
          theme: modalConfig.theme,
          supportedWallets: props.walletConfigs,
          onSelect: data => {
            props.selectWallet(walletConfig);
            setModalConfig(config => ({
              ...config,
              data
            }));
          },
          walletConfig: walletConfig
        }) : /*#__PURE__*/jsxs(WalletButton, {
          type: "button",
          onClick: () => {
            props.selectWallet(walletConfig);
          },
          children: [/*#__PURE__*/jsx(Img, {
            src: walletConfig.meta.iconURL,
            width: iconSize.lg,
            height: iconSize.lg,
            loading: "eager"
          }), /*#__PURE__*/jsx(WalletName, {
            children: walletConfig.meta.name
          }), isInstalled && /*#__PURE__*/jsx(InstallBadge, {
            children: " Installed "
          })]
        })
      }, walletConfig.id);
    })
  });
};
const WalletList = styled.ul`
  all: unset;
  list-style-type: none;
  display: flex;
  flex-direction: column;
  gap: ${spacing.xs};
  box-sizing: border-box;
`;
const WalletButton = styled.button`
  all: unset;
  padding: ${spacing.sm} ${spacing.md};
  border-radius: ${radius.sm};
  display: flex;
  align-items: center;
  gap: ${spacing.md};
  cursor: pointer;
  box-sizing: border-box;
  width: 100%;
  color: ${p => p.theme.text.neutral};
  background: ${p => p.theme.bg.elevated};
  transition: 100ms ease;
  &:hover {
    background: ${p => p.theme.bg.highlighted};
  }
`;
const InstallBadge = styled.span`
  padding: ${spacing.xxs} ${spacing.xs};
  font-size: ${fontSize.xs};
  background-color: ${p => p.theme.badge.secondary};
  border-radius: ${radius.lg};
  margin-left: auto;
`;
const WalletName = styled.span`
  font-size: ${fontSize.md};
  font-weight: 500;
`;

/**
 *
 * @returns `true` if the wallet does not have a UI and can sign transactions without user interaction.
 */
function useIsHeadlessWallet() {
  const activeWallet = useWallet();
  if (!activeWallet) {
    return false;
  }
  const id = activeWallet.walletId;
  return id === walletIds.localWallet || id === walletIds.paper || id === walletIds.magicLink;
}

const HeadlessConnectUI = _ref => {
  let {
    close,
    walletConfig,
    open,
    supportedWallets
  } = _ref;
  const connect = useConnect();
  const prompted = useRef(false);
  const singleWallet = supportedWallets.length === 1;
  useEffect(() => {
    if (prompted.current) {
      return;
    }
    prompted.current = true;
    (async () => {
      close();
      try {
        await connect(walletConfig);
      } catch (e) {
        if (!singleWallet) {
          open();
        }
        console.error(e);
      }
    })();
  }, [walletConfig, connect, close, open, singleWallet]);
  return null;
};

export { BackButton as B, ConnectingScreen as C, FormFieldWithIconButton as F, GetStartedScreen as G, HelperLink as H, Img as I, ModalTitle as M, ScanScreen as S, WalletSelection as W, ModalDescription as a, HeadlessConnectUI as b, coinbaseWallet as c, defaultWallets as d, useIsWalletModalOpen as e, useSetIsWalletModalOpen as f, ButtonLink as g, FormField as h, isMobile as i, fadeInAnimation as j, Skeleton as k, SetModalConfigCtx as l, metamaskWallet as m, ModalConfigCtx as n, WalletSelector as o, WalletUIStatesProvider as p, coinbaseWallet$1 as q, metamaskWallet$1 as r, walletConnectV1$1 as s, useIsHeadlessWallet as u, walletConnectV1 as w };
