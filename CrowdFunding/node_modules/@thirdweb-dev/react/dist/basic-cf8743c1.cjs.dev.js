'use strict';

var react = require('@emotion/react');
var styled = require('@emotion/styled');
var jsxRuntime = require('react/jsx-runtime');
var colors = require('@radix-ui/colors');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);

const darkTheme = {
  overlay: {
    subdued: "rgba(0, 0, 0, 0.74)"
  },
  bg: {
    base: colors.mauveDark.mauve1,
    baseHover: colors.mauveDark.mauve2,
    elevated: colors.mauveDark.mauve3,
    elevatedHover: colors.mauveDark.mauve4,
    highlighted: colors.mauveDark.mauve5,
    inverted: colors.mauveDark.mauve12,
    invertedFocused: colors.mauveDark.mauve7,
    danger: colors.tomato.tomato12
  },
  border: {
    base: colors.mauveDark.mauve3,
    elevated: colors.mauveDark.mauve4
  },
  badge: {
    secondary: colors.mauveDark.mauve6
  },
  text: {
    neutral: colors.mauveDark.mauve12,
    inverted: colors.mauveDark.mauve1,
    secondary: colors.mauveDark.mauve9,
    danger: colors.tomato.tomato9
  },
  icon: {
    secondary: colors.mauveDark.mauve11,
    primary: colors.mauveDark.mauve12,
    inverted: colors.mauveDark.mauve1,
    danger: colors.tomato.tomato9,
    success: colors.green.green7,
    link: colors.blue.blue9
  },
  link: {
    primary: colors.blue.blue9,
    primaryHover: colors.mauveDark.mauve12
  },
  input: {
    bg: colors.mauveDark.mauve3,
    bgHover: colors.mauveDark.mauve5,
    outline: colors.mauveDark.mauve5,
    focusRing: colors.blue.blue9,
    errorRing: colors.tomato.tomato9
  },
  tooltip: {
    bg: "black",
    text: "white"
  }
};
const lightTheme = {
  overlay: {
    subdued: "rgba(0, 0, 0, 0.4)"
  },
  bg: {
    base: colors.mauve.mauve1,
    baseHover: colors.mauve.mauve2,
    elevated: colors.mauve.mauve3,
    elevatedHover: colors.mauve.mauve4,
    highlighted: colors.mauve.mauve5,
    inverted: colors.mauve.mauve12,
    invertedFocused: colors.mauve.mauve7,
    danger: colors.tomato.tomato4
  },
  border: {
    base: colors.mauve.mauve6,
    elevated: colors.mauve.mauve7
  },
  badge: {
    secondary: colors.mauve.mauve1
  },
  text: {
    neutral: colors.mauve.mauve12,
    inverted: colors.mauve.mauve1,
    secondary: colors.mauve.mauve10,
    danger: colors.tomato.tomato9
  },
  icon: {
    secondary: colors.mauve.mauve10,
    primary: colors.mauve.mauve12,
    inverted: colors.mauve.mauve1,
    danger: colors.tomato.tomato9,
    success: colors.green.green9,
    link: colors.blue.blue11
  },
  link: {
    primary: colors.blue.blue11,
    primaryHover: colors.mauve.mauve12
  },
  input: {
    bg: colors.mauve.mauve3,
    bgHover: colors.mauveDark.mauve5,
    outline: colors.mauve.mauve7,
    focusRing: colors.blue.blue11,
    errorRing: colors.tomato.tomato10
  },
  tooltip: {
    bg: "black",
    text: "white"
  }
};
const fontSize = {
  xs: "12px",
  sm: "14px",
  md: "16px",
  lg: "20px",
  xl: "24px"
};
const spacing = {
  xxs: "6px",
  xs: "8px",
  sm: "12px",
  md: "16px",
  lg: "24px",
  xl: "32px",
  xxl: "48px"
};
const radius = {
  sm: "6px",
  md: "8px",
  lg: "12px",
  xl: "20px",
  xxl: "32px"
};
const iconSize = {
  xs: "12",
  sm: "16",
  md: "24",
  lg: "32",
  xl: "48"
};

// desktop first style media query
const media = {
  mobile: `@media (max-width: 640px)`
};
const shadow = {
  sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
  md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
  lg: "0 10px 15px -3px rgb(0 0 0 / 0.07), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
  xl: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)"
};

const Spinner = props => {
  const theme = react.useTheme();
  return /*#__PURE__*/jsxRuntime.jsx(Svg, {
    style: {
      width: iconSize[props.size],
      height: iconSize[props.size]
    },
    viewBox: "0 0 50 50",
    children: /*#__PURE__*/jsxRuntime.jsx(Circle, {
      cx: "25",
      cy: "25",
      r: "20",
      fill: "none",
      stroke: theme.icon[props.color || "primary"],
      strokeWidth: "4"
    })
  });
};

// animations
const dashAnimation = react.keyframes`
 0% {
    stroke-dasharray: 1, 150;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -35;
  }
  100% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -124;
  }
`;
const rotateAnimation = react.keyframes`
100% {
    transform: rotate(360deg);
  }
`;

// styles
const Svg = styled__default["default"].svg`
  animation: ${rotateAnimation} 2s linear infinite;
  width: 1em;
  height: 1em;
`;
const Circle = styled__default["default"].circle`
  stroke-linecap: round;
  animation: ${dashAnimation} 1.5s ease-in-out infinite;
`;

const Spacer = _ref => {
  let {
    y
  } = _ref;
  return /*#__PURE__*/jsxRuntime.jsx("div", {
    style: {
      height: spacing[y]
    }
  });
};

// for rendering a conventional button
const Button = styled__default["default"].button`
  all: unset;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: ${radius.md};
  padding: ${spacing.sm} ${spacing.sm};
  font-size: ${fontSize.md};
  font-weight: 500;
  box-sizing: border-box;
  -webkit-tap-highlight-color: transparent;
  line-height: 1;
  flex-shrink: 0;

  &:focus {
    box-shadow: 0 0 0 3px
      ${p => {
  switch (p.variant) {
    case "inverted":
      return p.theme.bg.invertedFocused;
    case "secondary":
      return p.theme.bg.highlighted;
    case "link":
      return "none";
    case "danger":
      return p.theme.text.danger;
  }
}};
  }

  box-shadow: ${p => {
  switch (p.variant) {
    case "danger":
      return `0 0 0 2px ${p.theme.text.danger}`;
    case "link":
      return "none";
    default:
      return "none";
  }
}};

  background: ${p => {
  switch (p.variant) {
    case "inverted":
      return p.theme.bg.inverted;
    case "secondary":
      return p.theme.bg.elevated;
    case "link":
      return "transparent";
    case "danger":
      return "none";
  }
}};
  color: ${p => {
  switch (p.variant) {
    case "inverted":
      return p.theme.text.inverted;
    case "secondary":
      return p.theme.text.neutral;
    case "link":
      return p.theme.link.primary;
    case "danger":
      return p.theme.text.danger;
  }
}};

  ${p => {
  if (p.variant === "link") {
    return `
      padding: 0;
      &:hover {
        color: ${p.theme.text.neutral};
      }`;
  }
}}

  cursor: pointer;

  /* pressed effect */
  &:active {
    transform: translateY(1px);
  }

  &[disabled] {
    cursor: not-allowed;
  }
`;

// for rendering a button with an icon
const IconButton = styled__default["default"].button`
  all: unset;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: ${radius.sm};
  -webkit-tap-highlight-color: transparent;
  color: ${p => {
  switch (p.variant) {
    case "neutral":
      return p.theme.text.neutral;
    case "secondary":
      return p.theme.text.secondary;
  }
}};
  padding: 2px;
  transition: background 0.2s ease, color 0.2s ease;
  &:hover {
    background: ${p => p.theme.bg.elevated};
    color: ${p => p.theme.text.neutral};
  }
`;

// for rendering a button next to input
const InputButton = styled__default["default"].button`
  all: unset;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: ${radius.sm};
  padding: ${spacing.sm};
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  color: ${p => p.theme.text.secondary};
  &:hover {
    color: ${p => p.theme.text.neutral};
  }
  &[disabled] {
    cursor: not-allowed;
  }
`;

const Label = styled__default["default"].label`
  font-size: ${fontSize.sm};
  color: ${p => p.theme.text.neutral};
  display: block;
`;
const Input = styled__default["default"].input`
  font-size: ${fontSize.md};
  display: block;
  padding: ${spacing.sm};
  box-sizing: border-box;
  width: 100%;
  outline: none;
  border: none;
  border-radius: 6px;
  color: ${p => p.theme.text.neutral};
  -webkit-appearance: none;
  appearance: none;
  background: ${p => {
  switch (p.variant) {
    case "secondary":
      return p.theme.bg.elevated;
    default:
      return "transparent";
  }
}};

  &::placeholder {
    color: ${p => p.theme.text.secondary};
  }

  box-shadow: 0 0 0 1.5px
    ${p => {
  switch (p.variant) {
    case "outline":
      return p.theme.input.outline;
    case "transparent":
      return "transparent";
    case "secondary":
      return p.theme.bg.elevated;
  }
}};

  /* when browser auto-fills the input  */
  &:-webkit-autofill {
    -webkit-text-fill-color: ${p => p.theme.text.neutral};
    -webkit-box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset !important;
    box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset !important;
    transition: background-color 5000s ease-in-out 0s;
  }

  &:-webkit-autofill:focus {
    -webkit-box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset,
      0 0 0 2px ${p => p.theme.input.focusRing} !important;
    box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset,
      0 0 0 2px ${p => p.theme.input.focusRing} !important;
  }

  &:focus {
    box-shadow: 0 0 0 2px ${p => p.theme.input.focusRing};
  }

  /* show overflow ellipsis for long text - but not if it's a type="password"  */
  &:not([type="password"]) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  &[data-error="true"] {
    box-shadow: 0 0 0 2px ${p => p.theme.input.errorRing} !important;
  }

  &[disabled] {
    cursor: not-allowed;
  }
`;

// for rendering a input and a button side by side
const InputContainer = styled__default["default"].div`
  display: flex;
  border-radius: ${radius.sm};
  box-shadow: 0 0 0px 1.5px ${p => p.theme.input.outline};

  /* show focus ring on container instead of input  */
  &:focus-within {
    box-shadow: 0 0 0px 2px ${p => p.theme.input.focusRing};
  }

  input:focus {
    box-shadow: none;
  }

  /* show error ring on container instead of input  */
  &[data-error="true"] {
    box-shadow: 0 0 0px 2px ${p => p.theme.input.errorRing};
  }
`;
const ErrorMessage = styled__default["default"].p`
  all: unset;
  font-size: ${fontSize.sm};
  display: block;
  color: ${p => p.theme.input.errorRing};
  line-height: 1.5;
`;
const FormFooter = styled__default["default"].div`
  display: flex;
  justify-content: flex-end;
  gap: ${spacing.sm};
`;

const Flex = props => {
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    style: {
      display: "flex",
      flexDirection: props.flexDirection,
      justifyContent: props.justifyContent,
      alignItems: props.alignItems,
      gap: props.gap ? spacing[props.gap] : undefined,
      ...(props.style || {})
    },
    children: [" ", props.children]
  });
};

exports.Button = Button;
exports.ErrorMessage = ErrorMessage;
exports.Flex = Flex;
exports.FormFooter = FormFooter;
exports.IconButton = IconButton;
exports.Input = Input;
exports.InputButton = InputButton;
exports.InputContainer = InputContainer;
exports.Label = Label;
exports.Spacer = Spacer;
exports.Spinner = Spinner;
exports.darkTheme = darkTheme;
exports.fontSize = fontSize;
exports.iconSize = iconSize;
exports.lightTheme = lightTheme;
exports.media = media;
exports.radius = radius;
exports.shadow = shadow;
exports.spacing = spacing;
