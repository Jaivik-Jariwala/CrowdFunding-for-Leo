'use strict';

var wallets = require('@thirdweb-dev/wallets');
var reactCore = require('@thirdweb-dev/react-core');
var coinbaseWallet = require('./headlessConnectUI-37c9fce2.cjs.dev.js');
var React = require('react');
var basic = require('./basic-cf8743c1.cjs.dev.js');
var jsxRuntime = require('react/jsx-runtime');
require('detect-browser');
require('@emotion/styled');
require('@emotion/react');
require('react-qr-code');
require('@radix-ui/react-dialog');
require('@radix-ui/react-icons');
require('@radix-ui/colors');

const FrameFailedConnect = props => {
  return /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
    children: [/*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.BackButton, {
      onClick: () => props.onBack()
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "lg"
    }), /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ModalTitle, {
        children: "Failed to connect to Frame."
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "sm"
      }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ModalDescription, {
        children: "Make sure the desktop app is installed and running. You can download Frame from the link below. Make sure to refresh this page once Frame is running."
      })]
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Flex, {
      flexDirection: "column",
      gap: "xs",
      children: /*#__PURE__*/jsxRuntime.jsxs(coinbaseWallet.ButtonLink, {
        onClick: () => {
          window.open("https://frame.sh", "_blank");
        },
        children: [/*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.Img, {
          width: basic.iconSize.lg,
          height: basic.iconSize.lg,
          src: props.walletIconURL
        }), /*#__PURE__*/jsxRuntime.jsx("span", {
          children: "Download Frame"
        })]
      })
    }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
      y: "xl"
    }), /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.HelperLink, {
      target: "_blank",
      href: props.supportLink,
      children: "Still having troubles connecting?"
    })]
  });
};
const FrameConnectUI = props => {
  const [screen, setScreen] = React.useState("connecting");
  const connect = reactCore.useConnect();
  const connectPrompted = React.useRef(false);
  const {
    walletConfig,
    close,
    goBack
  } = props;
  const downloadLink = "https://frame.sh";
  const supportLink = "https://docs.frame.sh";
  React.useEffect(() => {
    if (connectPrompted.current) {
      return;
    }

    // if loading
    (async () => {
      // if not mobile we connect
      if (!coinbaseWallet.isMobile()) {
        try {
          connectPrompted.current = true;
          setScreen("connecting");
          await connect(walletConfig);
          close();
        } catch (e) {
          setScreen("connect-failed");
        }
      }

      // on mobile we open the website
      else if (coinbaseWallet.isMobile()) {
        window.open(downloadLink);
      }
    })();
  }, [walletConfig, close, connect, goBack]);
  if (screen === "connecting") {
    return /*#__PURE__*/jsxRuntime.jsx(coinbaseWallet.ConnectingScreen, {
      onBack: goBack,
      walletName: walletConfig.meta.name,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: supportLink
    });
  }
  if (screen === "connect-failed") {
    return /*#__PURE__*/jsxRuntime.jsx(FrameFailedConnect, {
      onBack: goBack,
      walletIconURL: walletConfig.meta.iconURL,
      supportLink: supportLink
    });
  }
  return null;
};

const frameWallet = () => ({
  id: wallets.FrameWallet.id,
  meta: {
    name: "Frame",
    iconURL: "https://frame.nyc3.digitaloceanspaces.com/bundle/home/favicon.8f0e1342.png",
    urls: {
      chrome: "https://chrome.google.com/webstore/detail/frame-companion/ldcoohedfbjoobcadoglnnmmfbdlmmhf",
      firefox: "https://addons.mozilla.org/en-US/firefox/addon/frame-extension"
    }
  },
  create(options) {
    return new wallets.FrameWallet(options);
  },
  connectUI: FrameConnectUI,
  isInstalled() {
    if (wallets.assertWindowEthereum(globalThis.window)) {
      return globalThis.window.ethereum?.isFrame || globalThis.window.ethereum?.providers?.some(p => p.isFrame) || false;
    }
    return false;
  }
});

exports.frameWallet = frameWallet;
