/// <reference types="react" />
export declare const ModalTitle: import("@emotion/styled").StyledComponent<import("@radix-ui/react-dialog").DialogTitleProps & import("react").RefAttributes<HTMLHeadingElement> & {
    theme?: import("@emotion/react").Theme | undefined;
} & {
    theme?: {
        overlay: {
            subdued: string;
        };
        bg: {
            base: string;
            baseHover: string;
            elevated: string;
            elevatedHover: string;
            highlighted: string;
            inverted: string;
            invertedFocused: string;
            danger: string;
        };
        border: {
            base: string;
            elevated: string;
        };
        badge: {
            secondary: string;
        };
        text: {
            neutral: string;
            inverted: string;
            secondary: string;
            danger: string;
        };
        icon: {
            secondary: string;
            primary: string;
            inverted: string;
            danger: string;
            success: string;
            link: string;
        };
        link: {
            primary: string;
            primaryHover: string;
        };
        input: {
            bg: string;
            bgHover: string;
            outline: string;
            focusRing: string;
            errorRing: string;
        };
        tooltip: {
            bg: string;
            text: string;
        };
    } | undefined;
    centerOnMobile?: boolean | undefined;
}, {}, {}>;
export declare const ModalDescription: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    theme?: {
        overlay: {
            subdued: string;
        };
        bg: {
            base: string;
            baseHover: string;
            elevated: string;
            elevatedHover: string;
            highlighted: string;
            inverted: string;
            invertedFocused: string;
            danger: string;
        };
        border: {
            base: string;
            elevated: string;
        };
        badge: {
            secondary: string;
        };
        text: {
            neutral: string;
            inverted: string;
            secondary: string;
            danger: string;
        };
        icon: {
            secondary: string;
            primary: string;
            inverted: string;
            danger: string;
            success: string;
            link: string;
        };
        link: {
            primary: string;
            primaryHover: string;
        };
        input: {
            bg: string;
            bgHover: string;
            outline: string;
            focusRing: string;
            errorRing: string;
        };
        tooltip: {
            bg: string;
            text: string;
        };
    } | undefined;
    centerOnMobile?: boolean | undefined;
    sm?: boolean | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>, {}>;
export declare const BackButton: React.FC<{
    onClick: () => void;
    style?: React.CSSProperties;
}>;
export declare const HelperLink: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
} & {
    theme?: {
        overlay: {
            subdued: string;
        };
        bg: {
            base: string;
            baseHover: string;
            elevated: string;
            elevatedHover: string;
            highlighted: string;
            inverted: string;
            invertedFocused: string;
            danger: string;
        };
        border: {
            base: string;
            elevated: string;
        };
        badge: {
            secondary: string;
        };
        text: {
            neutral: string;
            inverted: string;
            secondary: string;
            danger: string;
        };
        icon: {
            secondary: string;
            primary: string;
            inverted: string;
            danger: string;
            success: string;
            link: string;
        };
        link: {
            primary: string;
            primaryHover: string;
        };
        input: {
            bg: string;
            bgHover: string;
            outline: string;
            focusRing: string;
            errorRing: string;
        };
        tooltip: {
            bg: string;
            text: string;
        };
    } | undefined;
    md?: boolean | undefined;
}, import("react").DetailedHTMLProps<import("react").AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, {}>;
//# sourceMappingURL=modalElements.d.ts.map