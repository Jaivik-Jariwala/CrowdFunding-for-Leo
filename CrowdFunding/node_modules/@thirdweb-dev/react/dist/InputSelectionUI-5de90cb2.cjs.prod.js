'use strict';

var React = require('react');
var basic = require('./basic-24103acc.cjs.prod.js');
var styled = require('@emotion/styled');
var reactIcons = require('@radix-ui/react-icons');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);

const TextDivider = styled__default["default"].div`
  display: flex;
  align-items: center;
  color: ${p => p.theme.text.secondary};
  font-size: ${basic.fontSize.sm};
  &::before,
  &::after {
    content: "";
    flex: 1;
    border-bottom: 1px solid ${p => p.theme.bg.elevated};
  }

  span {
    margin: 0 1rem;
  }
`;

function InputSelectionUI(props) {
  const [input, setInput] = React.useState("");
  const singleWallet = props.supportedWallets.length === 1;
  const [error, setError] = React.useState();
  const [showError, setShowError] = React.useState(false);
  const handleSelect = () => {
    setShowError(true);
    if (!input || !!error) {
      return;
    }
    props.onSelect(input);
  };
  const renderingError = showError && !!error || !input && !!props.emptyErrorMessage && showError;
  return /*#__PURE__*/jsxRuntime.jsxs("div", {
    children: [/*#__PURE__*/jsxRuntime.jsxs("div", {
      style: {
        position: "relative"
      },
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Input, {
        placeholder: props.placeholder,
        variant: "secondary",
        type: props.type,
        name: props.name,
        value: input,
        "data-error": renderingError,
        onChange: e => {
          setInput(e.target.value);
          if (props.errorMessage) {
            setError(props.errorMessage(e.target.value));
          } else {
            setError(undefined);
          }
        },
        onKeyDown: e => {
          if (e.key === "Enter") {
            handleSelect();
          }
        }
      }), /*#__PURE__*/jsxRuntime.jsx(CircleInputButton, {
        onClick: () => {
          handleSelect();
        },
        color: "inverted",
        type: "button",
        children: /*#__PURE__*/jsxRuntime.jsx(reactIcons.ArrowRightIcon, {
          width: basic.iconSize.sm,
          height: basic.iconSize.sm
        })
      })]
    }), showError && error && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xs"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.ErrorMessage, {
        children: error
      })]
    }), !(showError && error) && !input && props.emptyErrorMessage && showError && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "xs"
      }), /*#__PURE__*/jsxRuntime.jsx(basic.ErrorMessage, {
        children: props.emptyErrorMessage
      })]
    }), !singleWallet && /*#__PURE__*/jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [/*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "lg"
      }), /*#__PURE__*/jsxRuntime.jsx(TextDivider, {
        children: /*#__PURE__*/jsxRuntime.jsx("span", {
          children: " OR "
        })
      }), /*#__PURE__*/jsxRuntime.jsx(basic.Spacer, {
        y: "md"
      })]
    })]
  });
}
const CircleInputButton = styled__default["default"](basic.InputButton)`
  background: ${p => p.theme.bg.highlighted};
  border-radius: 50%;
  padding: ${basic.spacing.xxs};
  color: ${p => p.theme.text.neutral};
  position: absolute;
  top: 50%;
  right: ${basic.spacing.sm};
  transform: translateY(-50%);
  &:hover {
    color: ${p => p.theme.text.neutral};
  }
`;

exports.InputSelectionUI = InputSelectionUI;
exports.TextDivider = TextDivider;
