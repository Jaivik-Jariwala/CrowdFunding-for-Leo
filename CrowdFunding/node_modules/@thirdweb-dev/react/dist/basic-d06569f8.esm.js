import { keyframes, useTheme } from '@emotion/react';
import styled from '@emotion/styled';
import { jsx, jsxs } from 'react/jsx-runtime';
import { mauveDark, tomato, green, blue, mauve } from '@radix-ui/colors';

const darkTheme = {
  overlay: {
    subdued: "rgba(0, 0, 0, 0.74)"
  },
  bg: {
    base: mauveDark.mauve1,
    baseHover: mauveDark.mauve2,
    elevated: mauveDark.mauve3,
    elevatedHover: mauveDark.mauve4,
    highlighted: mauveDark.mauve5,
    inverted: mauveDark.mauve12,
    invertedFocused: mauveDark.mauve7,
    danger: tomato.tomato12
  },
  border: {
    base: mauveDark.mauve3,
    elevated: mauveDark.mauve4
  },
  badge: {
    secondary: mauveDark.mauve6
  },
  text: {
    neutral: mauveDark.mauve12,
    inverted: mauveDark.mauve1,
    secondary: mauveDark.mauve9,
    danger: tomato.tomato9
  },
  icon: {
    secondary: mauveDark.mauve11,
    primary: mauveDark.mauve12,
    inverted: mauveDark.mauve1,
    danger: tomato.tomato9,
    success: green.green7,
    link: blue.blue9
  },
  link: {
    primary: blue.blue9,
    primaryHover: mauveDark.mauve12
  },
  input: {
    bg: mauveDark.mauve3,
    bgHover: mauveDark.mauve5,
    outline: mauveDark.mauve5,
    focusRing: blue.blue9,
    errorRing: tomato.tomato9
  },
  tooltip: {
    bg: "black",
    text: "white"
  }
};
const lightTheme = {
  overlay: {
    subdued: "rgba(0, 0, 0, 0.4)"
  },
  bg: {
    base: mauve.mauve1,
    baseHover: mauve.mauve2,
    elevated: mauve.mauve3,
    elevatedHover: mauve.mauve4,
    highlighted: mauve.mauve5,
    inverted: mauve.mauve12,
    invertedFocused: mauve.mauve7,
    danger: tomato.tomato4
  },
  border: {
    base: mauve.mauve6,
    elevated: mauve.mauve7
  },
  badge: {
    secondary: mauve.mauve1
  },
  text: {
    neutral: mauve.mauve12,
    inverted: mauve.mauve1,
    secondary: mauve.mauve10,
    danger: tomato.tomato9
  },
  icon: {
    secondary: mauve.mauve10,
    primary: mauve.mauve12,
    inverted: mauve.mauve1,
    danger: tomato.tomato9,
    success: green.green9,
    link: blue.blue11
  },
  link: {
    primary: blue.blue11,
    primaryHover: mauve.mauve12
  },
  input: {
    bg: mauve.mauve3,
    bgHover: mauveDark.mauve5,
    outline: mauve.mauve7,
    focusRing: blue.blue11,
    errorRing: tomato.tomato10
  },
  tooltip: {
    bg: "black",
    text: "white"
  }
};
const fontSize = {
  xs: "12px",
  sm: "14px",
  md: "16px",
  lg: "20px",
  xl: "24px"
};
const spacing = {
  xxs: "6px",
  xs: "8px",
  sm: "12px",
  md: "16px",
  lg: "24px",
  xl: "32px",
  xxl: "48px"
};
const radius = {
  sm: "6px",
  md: "8px",
  lg: "12px",
  xl: "20px",
  xxl: "32px"
};
const iconSize = {
  xs: "12",
  sm: "16",
  md: "24",
  lg: "32",
  xl: "48"
};

// desktop first style media query
const media = {
  mobile: `@media (max-width: 640px)`
};
const shadow = {
  sm: "0 1px 2px 0 rgb(0 0 0 / 0.05)",
  md: "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
  lg: "0 10px 15px -3px rgb(0 0 0 / 0.07), 0 4px 6px -4px rgb(0 0 0 / 0.1)",
  xl: "0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)"
};

const Spinner = props => {
  const theme = useTheme();
  return /*#__PURE__*/jsx(Svg, {
    style: {
      width: iconSize[props.size],
      height: iconSize[props.size]
    },
    viewBox: "0 0 50 50",
    children: /*#__PURE__*/jsx(Circle, {
      cx: "25",
      cy: "25",
      r: "20",
      fill: "none",
      stroke: theme.icon[props.color || "primary"],
      strokeWidth: "4"
    })
  });
};

// animations
const dashAnimation = keyframes`
 0% {
    stroke-dasharray: 1, 150;
    stroke-dashoffset: 0;
  }
  50% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -35;
  }
  100% {
    stroke-dasharray: 90, 150;
    stroke-dashoffset: -124;
  }
`;
const rotateAnimation = keyframes`
100% {
    transform: rotate(360deg);
  }
`;

// styles
const Svg = styled.svg`
  animation: ${rotateAnimation} 2s linear infinite;
  width: 1em;
  height: 1em;
`;
const Circle = styled.circle`
  stroke-linecap: round;
  animation: ${dashAnimation} 1.5s ease-in-out infinite;
`;

const Spacer = _ref => {
  let {
    y
  } = _ref;
  return /*#__PURE__*/jsx("div", {
    style: {
      height: spacing[y]
    }
  });
};

// for rendering a conventional button
const Button = styled.button`
  all: unset;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: ${radius.md};
  padding: ${spacing.sm} ${spacing.sm};
  font-size: ${fontSize.md};
  font-weight: 500;
  box-sizing: border-box;
  -webkit-tap-highlight-color: transparent;
  line-height: 1;
  flex-shrink: 0;

  &:focus {
    box-shadow: 0 0 0 3px
      ${p => {
  switch (p.variant) {
    case "inverted":
      return p.theme.bg.invertedFocused;
    case "secondary":
      return p.theme.bg.highlighted;
    case "link":
      return "none";
    case "danger":
      return p.theme.text.danger;
  }
}};
  }

  box-shadow: ${p => {
  switch (p.variant) {
    case "danger":
      return `0 0 0 2px ${p.theme.text.danger}`;
    case "link":
      return "none";
    default:
      return "none";
  }
}};

  background: ${p => {
  switch (p.variant) {
    case "inverted":
      return p.theme.bg.inverted;
    case "secondary":
      return p.theme.bg.elevated;
    case "link":
      return "transparent";
    case "danger":
      return "none";
  }
}};
  color: ${p => {
  switch (p.variant) {
    case "inverted":
      return p.theme.text.inverted;
    case "secondary":
      return p.theme.text.neutral;
    case "link":
      return p.theme.link.primary;
    case "danger":
      return p.theme.text.danger;
  }
}};

  ${p => {
  if (p.variant === "link") {
    return `
      padding: 0;
      &:hover {
        color: ${p.theme.text.neutral};
      }`;
  }
}}

  cursor: pointer;

  /* pressed effect */
  &:active {
    transform: translateY(1px);
  }

  &[disabled] {
    cursor: not-allowed;
  }
`;

// for rendering a button with an icon
const IconButton = styled.button`
  all: unset;
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: ${radius.sm};
  -webkit-tap-highlight-color: transparent;
  color: ${p => {
  switch (p.variant) {
    case "neutral":
      return p.theme.text.neutral;
    case "secondary":
      return p.theme.text.secondary;
  }
}};
  padding: 2px;
  transition: background 0.2s ease, color 0.2s ease;
  &:hover {
    background: ${p => p.theme.bg.elevated};
    color: ${p => p.theme.text.neutral};
  }
`;

// for rendering a button next to input
const InputButton = styled.button`
  all: unset;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: ${radius.sm};
  padding: ${spacing.sm};
  cursor: pointer;
  -webkit-tap-highlight-color: transparent;
  color: ${p => p.theme.text.secondary};
  &:hover {
    color: ${p => p.theme.text.neutral};
  }
  &[disabled] {
    cursor: not-allowed;
  }
`;

const Label = styled.label`
  font-size: ${fontSize.sm};
  color: ${p => p.theme.text.neutral};
  display: block;
`;
const Input = styled.input`
  font-size: ${fontSize.md};
  display: block;
  padding: ${spacing.sm};
  box-sizing: border-box;
  width: 100%;
  outline: none;
  border: none;
  border-radius: 6px;
  color: ${p => p.theme.text.neutral};
  -webkit-appearance: none;
  appearance: none;
  background: ${p => {
  switch (p.variant) {
    case "secondary":
      return p.theme.bg.elevated;
    default:
      return "transparent";
  }
}};

  &::placeholder {
    color: ${p => p.theme.text.secondary};
  }

  box-shadow: 0 0 0 1.5px
    ${p => {
  switch (p.variant) {
    case "outline":
      return p.theme.input.outline;
    case "transparent":
      return "transparent";
    case "secondary":
      return p.theme.bg.elevated;
  }
}};

  /* when browser auto-fills the input  */
  &:-webkit-autofill {
    -webkit-text-fill-color: ${p => p.theme.text.neutral};
    -webkit-box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset !important;
    box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset !important;
    transition: background-color 5000s ease-in-out 0s;
  }

  &:-webkit-autofill:focus {
    -webkit-box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset,
      0 0 0 2px ${p => p.theme.input.focusRing} !important;
    box-shadow: 0 0 0px 1000px ${p => p.theme.bg.elevated} inset,
      0 0 0 2px ${p => p.theme.input.focusRing} !important;
  }

  &:focus {
    box-shadow: 0 0 0 2px ${p => p.theme.input.focusRing};
  }

  /* show overflow ellipsis for long text - but not if it's a type="password"  */
  &:not([type="password"]) {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  &[data-error="true"] {
    box-shadow: 0 0 0 2px ${p => p.theme.input.errorRing} !important;
  }

  &[disabled] {
    cursor: not-allowed;
  }
`;

// for rendering a input and a button side by side
const InputContainer = styled.div`
  display: flex;
  border-radius: ${radius.sm};
  box-shadow: 0 0 0px 1.5px ${p => p.theme.input.outline};

  /* show focus ring on container instead of input  */
  &:focus-within {
    box-shadow: 0 0 0px 2px ${p => p.theme.input.focusRing};
  }

  input:focus {
    box-shadow: none;
  }

  /* show error ring on container instead of input  */
  &[data-error="true"] {
    box-shadow: 0 0 0px 2px ${p => p.theme.input.errorRing};
  }
`;
const ErrorMessage = styled.p`
  all: unset;
  font-size: ${fontSize.sm};
  display: block;
  color: ${p => p.theme.input.errorRing};
  line-height: 1.5;
`;
const FormFooter = styled.div`
  display: flex;
  justify-content: flex-end;
  gap: ${spacing.sm};
`;

const Flex = props => {
  return /*#__PURE__*/jsxs("div", {
    style: {
      display: "flex",
      flexDirection: props.flexDirection,
      justifyContent: props.justifyContent,
      alignItems: props.alignItems,
      gap: props.gap ? spacing[props.gap] : undefined,
      ...(props.style || {})
    },
    children: [" ", props.children]
  });
};

export { Button as B, ErrorMessage as E, FormFooter as F, Input as I, Label as L, Spacer as S, Flex as a, Spinner as b, InputContainer as c, InputButton as d, IconButton as e, fontSize as f, shadow as g, darkTheme as h, iconSize as i, lightTheme as l, media as m, radius as r, spacing as s };
