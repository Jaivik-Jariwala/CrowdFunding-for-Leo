import type { IAccountPermissions } from "@thirdweb-dev/contracts-js";
import { BigNumber, BytesLike } from "ethers";
import { z } from "zod";
export type AccountEvent = {
    account: string;
    admin: string;
};
export type AccessRestrictions = {
    startDate: Date;
    expirationDate: Date;
    nativeTokenLimitPerTransaction: BigNumber;
    approvedCallTargets: string[];
};
export declare const AccessRestrictionsSchema: z.ZodObject<{
    startDate: z.ZodDefault<z.ZodUnion<[z.ZodEffects<z.ZodDate, BigNumber, Date>, z.ZodEffects<z.ZodNumber, BigNumber, number>]>>;
    expirationDate: z.ZodDefault<z.ZodUnion<[z.ZodEffects<z.ZodDate, BigNumber, Date>, z.ZodEffects<z.ZodNumber, BigNumber, number>]>>;
    nativeTokenLimitPerTransaction: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, string, string | number>>;
    approvedCallTargets: z.ZodArray<z.ZodUnion<[z.ZodType<string, z.ZodTypeDef, string>, z.ZodType<`0x${string}`, z.ZodTypeDef, `${string}.eth` | `${string}.cb.id`>]>, "many">;
}, "strip", z.ZodTypeAny, {
    startDate: BigNumber;
    expirationDate: BigNumber;
    nativeTokenLimitPerTransaction: string;
    approvedCallTargets: string[];
}, {
    approvedCallTargets: string[];
    startDate?: number | Date | undefined;
    expirationDate?: number | Date | undefined;
    nativeTokenLimitPerTransaction?: string | number | undefined;
}>;
export type AccessRestrictionsInput = z.input<typeof AccessRestrictionsSchema>;
export type SignerWithRestrictions = {
    signer: string;
    isAdmin: boolean;
    restrictions: AccessRestrictions;
};
export type SignedAccountPermissionsPayload = {
    payload: IAccountPermissions.RoleRequestStruct;
    signature: BytesLike;
};
export declare enum RoleAction {
    GRANT = 0,
    REVOKE = 1
}
export declare const RoleRequest: {
    name: string;
    type: string;
}[];
//# sourceMappingURL=smart-wallet.d.ts.map