import type { IAccountFactory } from "@thirdweb-dev/contracts-js";
import { DetectableFeature } from "../interfaces/DetectableFeature";
import { ContractEvents } from "./contract-events";
import { ContractWrapper } from "./contract-wrapper";
import { Transaction } from "./transactions";
import { TransactionResultWithAddress } from "../types";
import { type BytesLike } from "ethers";
import type { AccountEvent } from "../../types/smart-wallet";
export declare class SmartWalletFactory<TContract extends IAccountFactory> implements DetectableFeature {
    featureName: "SmartWalletFactory";
    private contractWrapper;
    events: ContractEvents<IAccountFactory>;
    constructor(contractWrapper: ContractWrapper<TContract>);
    getAddress(): string;
    /*********************************
     * READ FUNCTIONS
     *******************************/
    /**
     * Get the deterministic address of the smart wallet that will be created
     *
     * @example
     * ```javascript
     * const walletAddress = await contract.smartWalletFactory.predictWalletAddress(admin);
     * ```
     * @param admin - The admin of the smart wallet.
     * @param extraData - (Optional) Extra data to be passed to the smart wallet on creation.
     * @returns the deterministic address of the smart wallet that will be created for the given admin.
     *
     * @twfeature SmartWalletFactory
     */
    predictWalletAddress(admin: string, extraData?: BytesLike): Promise<string>;
    /**
     * Get all signers who have authority on the given smart wallet
     *
     * @example
     * ```javascript
     * const allSigners = await contract.smartWalletFactory.getAssociatedSigners(admin);
     * ```
     * @param wallet - The smart wallet address.
     * @returns all signers who have authority on the given smart wallet.
     *
     * @twfeature SmartWalletFactory
     */
    getAssociatedSigners(wallet: string): Promise<string[]>;
    /**
     * Get all wallets on which the given signer has authority
     *
     * @example
     * ```javascript
     * const allWallets = await contract.smartWalletFactory.getAssociatedWallets(admin);
     * ```
     * @param signer - The smart wallet address.
     * @returns all wallets on which the given signer has authority.
     *
     * @twfeature SmartWalletFactory
     */
    getAssociatedWallets(signer: string): Promise<string[]>;
    /**
     * Get all wallets
     *
     * @example
     * ```javascript
     * const allWallets = await contract.smartWalletFactory.getAllWallets();
     * ```
     *
     * @returns all wallets created via the smart wallet factory.
     *
     * @twfeature SmartWalletFactory
     */
    getAllWallets(): Promise<AccountEvent[]>;
    /**
     * Check if a smart wallet has been deployed for the given admin
     *
     * @param admin - The admin of the smart wallet.
     * @param extraData - (Optional) Extra data to be passed to the smart wallet on creation.
     * @returns whether the smart wallet has been deployed for the given admin.
     */
    isWalletDeployed(admin: string, extraData?: BytesLike): Promise<boolean>;
    /*********************************
     * WRITE FUNCTIONS
     *******************************/
    /**
     * Create a smart wallet
     *
     * @remarks Create a smart wallet for an admin. The admin will have complete authority over the smart wallet.
     *
     * @param admin - The admin of the smart wallet.
     * @param extraData - (Optional) Extra data to be passed to the smart wallet on creation.
     *
     * @example
     *  ```javascript
     * const tx = await contract.smartWalletFactory.createWallet(admin, extraData);
     * const receipt = tx.receipt();
     * const smartWalletAddress = tx.address;
     * ```
     *
     * @twfeature SmartWalletFactory
     */
    createWallet: {
        (walletAdmin: string, extraData?: BytesLike | undefined): Promise<TransactionResultWithAddress<never>>;
        prepare: (walletAdmin: string, extraData?: BytesLike | undefined) => Promise<Transaction<TransactionResultWithAddress<never>>>;
    };
}
//# sourceMappingURL=smart-wallet-factory.d.ts.map