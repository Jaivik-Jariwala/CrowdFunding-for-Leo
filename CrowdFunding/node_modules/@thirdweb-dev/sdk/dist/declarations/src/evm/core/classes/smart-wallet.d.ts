import { DetectableFeature } from "../interfaces/DetectableFeature";
import { ContractWrapper } from "./contract-wrapper";
import { Transaction } from "./transactions";
import type { IAccountCore } from "@thirdweb-dev/contracts-js";
import { AccessRestrictions, SignerWithRestrictions } from "../../types";
import { AddressOrEns } from "../../schema";
export declare class SmartWallet<TContract extends IAccountCore> implements DetectableFeature {
    featureName: "SmartWallet";
    private contractWrapper;
    private emptyRole;
    constructor(contractWrapper: ContractWrapper<TContract>);
    getAddress(): string;
    /*********************************
     * HELPER FUNCTIONS
     ********************************/
    /**
     * Format the access restrictions for a given role
     *
     * @param restrictions - The access restrictions for a given role
     * @returns formatted role restrictions
     *
     */
    private parseRoleRestrictionsStruct;
    /**
     * Generate and sign a payload to grant or revoke a signer's access to the smart wallet.
     *
     * @param signer - The address of the signer
     * @param roleAction - The address of the signer
     * @returns The generated payload and signature produced on signing that payload.
     *
     */
    private generatePayload;
    /**
     * Get the factory contract which deployed the smart wallet
     *
     * @returns Returns the address of the factory
     *
     */
    private getFactory;
    /*********************************
     * READ FUNCTIONS
     ********************************/
    /**
     * Get the restrictions under which a given signer can use the smart wallet.
     *
     * @example
     * ```javascript
     * const restrictionsForSigner = await contract.smartWallet.getAccessRestrictions(signer);
     * ```
     * @param signer - The address of a signer of the smart wallet.
     * @returns the restrictions under which a given signer can use the smart wallet.
     *
     * @twfeature SmartWallet
     */
    getAccessRestrictions(signerAddress: AddressOrEns): Promise<AccessRestrictions>;
    /**
     * Get the address of the EIP-4337 factory contract which deployed the smart wallet
     *
     * @example
     * ```javascript
     * const factoryAddress = await contract.smartWallet.getFactoryAddress();
     * ```
     * @returns the address of the factory which deployed the smart wallet.
     *
     * @twfeature SmartWallet
     */
    getFactoryAddress(): Promise<string>;
    /**
     * Get all signers (admin or non-admin) of the smart wallet, along with their access restrictions.
     *
     * @example
     * ```javascript
     * const allSigners = await contract.smartWallet.getSignersWithRestrictions();
     * ```
     * @returns all signers (admin or non-admin) of the smart wallet, along with their access restrictions.
     *
     * @twfeature SmartWallet
     */
    getSignersWithRestrictions(): Promise<SignerWithRestrictions[]>;
    /*********************************
     * WRITE FUNCTIONS
     ********************************/
    /**
     * Grant an address admin access to the smart wallet.
     *
     * @remarks Grants an address admin access to the smart wallet. The admin will have complete authority over the smart wallet.
     *
     * @param signer - The address to be granted admin access to the smart wallet.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.grantAdminAccess(signer);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    grantAdminAccess: {
        (signerAddress: string): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
    /**
     * Revoke an address' admin access to the smart wallet.
     *
     * @remarks Revokes an address' admin access to the smart wallet.
     *
     * @param signer - The address of an admin of the smart wallet.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.revokeAdminAccess(signer);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    revokeAdminAccess: {
        (signerAddress: string): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
    /**
     * Grant an address access to the smart wallet with certain restrictions.
     *
     * @remarks Grants an address access to the smart wallet with certain restrictions.
     *
     * @param signer - The address to be granted access to the smart wallet.
     * @param restrictions - The restrictions to be applied to the signer's use of the smart wallet.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.grantAccess(signer, restrictions);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    grantAccess: {
        (signerAddress: string, restrictions: {
            approvedCallTargets: string[];
            startDate?: number | Date | undefined;
            expirationDate?: number | Date | undefined;
            nativeTokenLimitPerTransaction?: string | number | undefined;
        }): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string, restrictions: {
            approvedCallTargets: string[];
            startDate?: number | Date | undefined;
            expirationDate?: number | Date | undefined;
            nativeTokenLimitPerTransaction?: string | number | undefined;
        }) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
    /**
     * Approve an address as a call target for a given signer on the smart wallet.
     *
     * @remarks Approves an address as a call target for a given signer on the smart wallet.
     *
     * @param signer - A signer with restricted access to the smart wallet.
     * @param target - The address to approve as a call target for the signer.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.approveTargetForSigner(signer, target);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    approveTargetForSigner: {
        (signerAddress: string, target: string): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string, target: string) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
    /**
     * Disapprove an address as a call target for a given signer on the smart wallet.
     *
     * @remarks Disapprove an address as a call target for a given signer on the smart wallet.
     *
     * @param signer - A signer with restricted access to the smart wallet.
     * @param target - The address to disapprove as a call target for the signer.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.disapproveTargetForSigner(signer, target);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    disapproveTargetForSigner: {
        (signerAddress: string, target: string): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string, target: string) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
    /**
     * Update an address' access to the smart wallet.
     *
     * @remarks Updates an address' access to the smart wallet.
     *
     * @param signer - The address whose access to the smart wallet is to be updated.
     * @param restrictions - The restrictions to be applied to the signer's use of the smart wallet.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.updateAccess(signer, restrictions);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    updateAccess: {
        (signerAddress: string, restrictions: {
            approvedCallTargets: string[];
            startDate?: number | Date | undefined;
            expirationDate?: number | Date | undefined;
            nativeTokenLimitPerTransaction?: string | number | undefined;
        }): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string, restrictions: {
            approvedCallTargets: string[];
            startDate?: number | Date | undefined;
            expirationDate?: number | Date | undefined;
            nativeTokenLimitPerTransaction?: string | number | undefined;
        }) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
    /**
     * Revoke an address' access to the smart wallet.
     *
     * @remarks Revokes an address' access to the smart wallet.
     *
     * @param signer - The address whose access to the smart wallet is to be revoked.
     *
     * @example
     * ```javascript
     * const tx = await contract.smartWallet.revokeAccess(signer);
     * const receipt = tx.receipt();
     * ```
     *
     * @twfeature SmartWallet
     */
    revokeAccess: {
        (signerAddress: string): Promise<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>;
        prepare: (signerAddress: string) => Promise<Transaction<Omit<{
            receipt: import("@ethersproject/abstract-provider").TransactionReceipt;
            data: () => Promise<unknown>;
        }, "data">>>;
    };
}
//# sourceMappingURL=smart-wallet.d.ts.map