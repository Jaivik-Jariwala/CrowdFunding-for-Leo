import { RequiredParam } from "../../../core/query-utils/required-param";
import { WalletAddress } from "../../types";
import { UseQueryResult } from "@tanstack/react-query";
import type { AccountEvent, AddressOrEns, SmartContract } from "@thirdweb-dev/sdk";
import type { BytesLike } from "ethers";
/** **********************/
/**       READ HOOKS    **/
/** **********************/
/**
 * Get all wallets
 *
 * @example
 * ```javascript
 * const { data: smartWallets, isLoading, error } = useSmartWallets(contract);
 * ```
 *
 * @param contract - an instance of a smart wallet factory contract
 * @returns a response object that includes an array of all smart wallets with their associated admin
 * @twfeature SmartWalletFactory
 * @see {@link https://portal.thirdweb.com/react/react.usesmartwallets?utm_source=sdk | Documentation}
 * @beta
 */
export declare function useSmartWallets(contract: RequiredParam<SmartContract>): UseQueryResult<AccountEvent[]>;
/**
 * Get all wallets associated with the provided address
 *
 * @example
 * ```javascript
 * const { data: smartWalletsForAddress, isLoading, error } = useSmartWalletsForAddress(contract, "{{wallet_address}}");
 * ```
 *
 * @param contract - an instance of a smart wallet factory contract
 * @returns a response object that includes an array of all smart wallets associated with the adress
 * @twfeature SmartWalletFactory
 * @see {@link https://portal.thirdweb.com/react/react.usesmartwalletsforaddress?utm_source=sdk | Documentation}
 * @beta
 */
export declare function useSmartWalletsForAddress(contract: RequiredParam<SmartContract>, address: AddressOrEns): UseQueryResult<string[]>;
/**
 * Check if a smart wallet has been deployed for the given admin
 *
 * @example
 * ```javascript
 * const { data: isSmartWalletDeployed, isLoading, error } = useIsSmartWalletDeployed(contract);
 * ```
 *
 * @param contract - an instance of a smart wallet factory contract
 * @returns a boolean indicating if a smart wallet has been deployed for the given admin
 * @twfeature SmartWalletFactory
 * @see {@link https://portal.thirdweb.com/react/react.useissmartwalletdeployed?utm_source=sdk | Documentation}
 * @beta
 */
export declare function useIsSmartWalletDeployed(contract: RequiredParam<SmartContract>, admin: RequiredParam<WalletAddress>, extraData?: BytesLike): UseQueryResult<boolean>;
/** **********************/
/**     WRITE HOOKS     **/
/** **********************/
/**
 * Create a smart wallet
 *
 * @example
 * ```jsx
 * const Component = () => {
 *   const { contract } = useContract("{{contract_address}}");
 *   const {
 *     mutate: createSmartWallet,
 *     isLoading,
 *     error,
 *   } = useCreateSmartWallet(contract);
 *
 *   if (error) {
 *     console.error("failed to create smart wallet", error);
 *   }
 *
 *   return (
 *     <button
 *       disabled={isLoading}
 *       onClick={() => createSmartWallet("0x...")}
 *     >
 *       Create Smart Wallet
 *     </button>
 *   );
 * };
 * ```
 *
 * @param contract - an instance of a smart wallet factory contract
 * @returns a mutation object that can be used to create a smart wallet
 * @twfeature SmartWalletFactory
 * @see {@link https://portal.thirdweb.com/react/react.usecreatesmartwallet?utm_source=sdk | Documentation}
 * @beta
 */
export declare function useCreateSmartWallet(contract: RequiredParam<SmartContract>): import("@tanstack/react-query").UseMutationResult<import("@thirdweb-dev/sdk").TransactionResultWithAddress<never>, unknown, string, unknown>;
//# sourceMappingURL=smart-wallet-factory.d.ts.map