'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var wc = require('../../dist/wc-bf863bbf.cjs.dev.js');
var walletIds = require('../../dist/walletIds-f74ce875.cjs.dev.js');
var evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase = require('../../dist/base-e70e83ee.cjs.dev.js');
var connector = require('../../dist/connector-c6b358ae.cjs.dev.js');
var evm_wallets_paperWallet_dist_thirdwebDevWalletsEvmWalletsPaperWallet = require('../wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.dev.js');
var evm_wallets_coinbaseWallet_dist_thirdwebDevWalletsEvmWalletsCoinbaseWallet = require('../wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.dev.js');
var evm_wallets_localWallet_dist_thirdwebDevWalletsEvmWalletsLocalWallet = require('../wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.dev.js');
var evm_wallets_frame_dist_thirdwebDevWalletsEvmWalletsFrame = require('../wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.dev.js');
var evm_wallets_injected_dist_thirdwebDevWalletsEvmWalletsInjected = require('../wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.dev.js');
var evm_wallets_metamask_dist_thirdwebDevWalletsEvmWalletsMetamask = require('../wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.dev.js');
var evm_wallets_walletConnect_dist_thirdwebDevWalletsEvmWalletsWalletConnect = require('../wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.dev.js');
var evm_wallets_walletConnectV1_dist_thirdwebDevWalletsEvmWalletsWalletConnectV1 = require('../wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.dev.js');
var evm_wallets_safe_dist_thirdwebDevWalletsEvmWalletsSafe = require('../wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.dev.js');
var evm_wallets_magic_dist_thirdwebDevWalletsEvmWalletsMagic = require('../wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.dev.js');
var evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet = require('../../dist/smart-wallet-4cd812c8.cjs.dev.js');
var evm_wallets_ethers_dist_thirdwebDevWalletsEvmWalletsEthers = require('../wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.dev.js');
var evm_wallets_privateKey_dist_thirdwebDevWalletsEvmWalletsPrivateKey = require('../wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.dev.js');
var evm_wallets_zerion_dist_thirdwebDevWalletsEvmWalletsZerion = require('../wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.dev.js');
var assertWindowEthereum = require('../../dist/assertWindowEthereum-a517acdc.cjs.dev.js');
var WagmiConnector = require('../../dist/WagmiConnector-d9779ee8.cjs.dev.js');
var errors = require('../../dist/errors-b19e9e69.cjs.dev.js');
var normalizeChainId = require('../../dist/normalizeChainId-8778491e.cjs.dev.js');
var constants = require('../../dist/constants-ecad1680.cjs.dev.js');
require('../../dist/classPrivateMethodGet-8801ecd5.cjs.dev.js');
require('../../dist/classPrivateFieldSet-f0dc2a42.cjs.dev.js');
require('../../dist/defineProperty-21d22449.cjs.dev.js');
require('../wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.dev.js');
require('ethers');
require('eventemitter3');
require('@thirdweb-dev/chains');
require('buffer');
require('@walletconnect/core');
require('@walletconnect/web3wallet');
require('@walletconnect/jsonrpc-utils');
require('@walletconnect/client');
require('@thirdweb-dev/sdk');
require('../../dist/keys-0ff1a680.cjs.dev.js');



exports.EIP155_SIGNING_METHODS = wc.EIP155_SIGNING_METHODS;
exports.walletIds = walletIds.walletIds;
exports.AbstractClientWallet = evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.AbstractClientWallet;
exports.DEFAULT_DAPP_META = evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.DEFAULT_DAPP_META;
exports.Connector = connector.Connector;
exports.WagmiAdapter = connector.WagmiAdapter;
exports.PaperWallet = evm_wallets_paperWallet_dist_thirdwebDevWalletsEvmWalletsPaperWallet.PaperWallet;
exports.CoinbaseWallet = evm_wallets_coinbaseWallet_dist_thirdwebDevWalletsEvmWalletsCoinbaseWallet.CoinbaseWallet;
exports.LocalWallet = evm_wallets_localWallet_dist_thirdwebDevWalletsEvmWalletsLocalWallet.LocalWallet;
exports.isValidPrivateKey = evm_wallets_localWallet_dist_thirdwebDevWalletsEvmWalletsLocalWallet.isValidPrivateKey;
exports.FrameWallet = evm_wallets_frame_dist_thirdwebDevWalletsEvmWalletsFrame.FrameWallet;
exports.InjectedWallet = evm_wallets_injected_dist_thirdwebDevWalletsEvmWalletsInjected.InjectedWallet;
exports.MetaMaskWallet = evm_wallets_metamask_dist_thirdwebDevWalletsEvmWalletsMetamask.MetaMaskWallet;
exports.WalletConnect = evm_wallets_walletConnect_dist_thirdwebDevWalletsEvmWalletsWalletConnect.WalletConnect;
exports.WalletConnectV1 = evm_wallets_walletConnectV1_dist_thirdwebDevWalletsEvmWalletsWalletConnectV1.WalletConnectV1;
exports.SafeWallet = evm_wallets_safe_dist_thirdwebDevWalletsEvmWalletsSafe.SafeWallet;
exports.MagicLink = evm_wallets_magic_dist_thirdwebDevWalletsEvmWalletsMagic.MagicLink;
exports.SmartWallet = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.SmartWallet;
exports.getAllSigners = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.getAllSigners;
exports.getAllSmartWallets = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.getAllSmartWallets;
exports.getSmartWalletAddress = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.getSmartWalletAddress;
exports.isSmartWalletDeployed = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.isSmartWalletDeployed;
exports.EthersWallet = evm_wallets_ethers_dist_thirdwebDevWalletsEvmWalletsEthers.EthersWallet;
exports.PrivateKeyWallet = evm_wallets_privateKey_dist_thirdwebDevWalletsEvmWalletsPrivateKey.PrivateKeyWallet;
exports.ZerionWallet = evm_wallets_zerion_dist_thirdwebDevWalletsEvmWalletsZerion.ZerionWallet;
exports.assertWindowEthereum = assertWindowEthereum.assertWindowEthereum;
exports.WagmiConnector = WagmiConnector.WagmiConnector;
exports.AddChainError = errors.AddChainError;
exports.ChainNotConfiguredError = errors.ChainNotConfiguredError;
exports.ProviderRpcError = errors.ProviderRpcError;
exports.SwitchChainError = errors.SwitchChainError;
exports.UserRejectedRequestError = errors.UserRejectedRequestError;
exports.normalizeChainId = normalizeChainId.normalizeChainId;
exports.SafeSupportedChainsSet = constants.SafeSupportedChainsSet;
