'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet = require('./smart-wallet-a19f9596.cjs.prod.js');
var evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase = require('./base-fc00830c.cjs.prod.js');
var wc = require('./wc-1f862048.cjs.prod.js');
var walletIds = require('./walletIds-4c2c4ce3.cjs.prod.js');
var WagmiConnector = require('./WagmiConnector-a1d4c271.cjs.prod.js');
var errors = require('./errors-fd51418f.cjs.prod.js');
var normalizeChainId = require('./normalizeChainId-a44d9dec.cjs.prod.js');
var connector = require('./connector-8f8ac6dc.cjs.prod.js');
var assertWindowEthereum = require('./assertWindowEthereum-e30dc199.cjs.prod.js');
var evm_wallets_paperWallet_dist_thirdwebDevWalletsEvmWalletsPaperWallet = require('../evm/wallets/paper-wallet/dist/thirdweb-dev-wallets-evm-wallets-paper-wallet.cjs.prod.js');
var evm_wallets_coinbaseWallet_dist_thirdwebDevWalletsEvmWalletsCoinbaseWallet = require('../evm/wallets/coinbase-wallet/dist/thirdweb-dev-wallets-evm-wallets-coinbase-wallet.cjs.prod.js');
var evm_wallets_localWallet_dist_thirdwebDevWalletsEvmWalletsLocalWallet = require('../evm/wallets/local-wallet/dist/thirdweb-dev-wallets-evm-wallets-local-wallet.cjs.prod.js');
var evm_wallets_frame_dist_thirdwebDevWalletsEvmWalletsFrame = require('../evm/wallets/frame/dist/thirdweb-dev-wallets-evm-wallets-frame.cjs.prod.js');
var evm_wallets_injected_dist_thirdwebDevWalletsEvmWalletsInjected = require('../evm/wallets/injected/dist/thirdweb-dev-wallets-evm-wallets-injected.cjs.prod.js');
var evm_wallets_metamask_dist_thirdwebDevWalletsEvmWalletsMetamask = require('../evm/wallets/metamask/dist/thirdweb-dev-wallets-evm-wallets-metamask.cjs.prod.js');
var evm_wallets_walletConnect_dist_thirdwebDevWalletsEvmWalletsWalletConnect = require('../evm/wallets/wallet-connect/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect.cjs.prod.js');
var evm_wallets_walletConnectV1_dist_thirdwebDevWalletsEvmWalletsWalletConnectV1 = require('../evm/wallets/wallet-connect-v1/dist/thirdweb-dev-wallets-evm-wallets-wallet-connect-v1.cjs.prod.js');
var constants = require('./constants-9757bfef.cjs.prod.js');
var evm_wallets_safe_dist_thirdwebDevWalletsEvmWalletsSafe = require('../evm/wallets/safe/dist/thirdweb-dev-wallets-evm-wallets-safe.cjs.prod.js');
var evm_wallets_magic_dist_thirdwebDevWalletsEvmWalletsMagic = require('../evm/wallets/magic/dist/thirdweb-dev-wallets-evm-wallets-magic.cjs.prod.js');
var evm_wallets_ethers_dist_thirdwebDevWalletsEvmWalletsEthers = require('../evm/wallets/ethers/dist/thirdweb-dev-wallets-evm-wallets-ethers.cjs.prod.js');
var evm_wallets_privateKey_dist_thirdwebDevWalletsEvmWalletsPrivateKey = require('../evm/wallets/private-key/dist/thirdweb-dev-wallets-evm-wallets-private-key.cjs.prod.js');
var evm_wallets_zerion_dist_thirdwebDevWalletsEvmWalletsZerion = require('../evm/wallets/zerion/dist/thirdweb-dev-wallets-evm-wallets-zerion.cjs.prod.js');
require('./classPrivateMethodGet-cf746c9e.cjs.prod.js');
require('./classPrivateFieldSet-4a4973f9.cjs.prod.js');
require('./defineProperty-6ca2d9a5.cjs.prod.js');
require('@walletconnect/core');
require('@walletconnect/web3wallet');
require('ethers');
require('eventemitter3');
require('@walletconnect/jsonrpc-utils');
require('@walletconnect/client');
require('@thirdweb-dev/sdk');
require('../evm/wallets/abstract/dist/thirdweb-dev-wallets-evm-wallets-abstract.cjs.prod.js');
require('@thirdweb-dev/chains');
require('buffer');
require('./keys-ddd5d524.cjs.prod.js');

class CredentialsStorage {
  async getItem() {
    const credential = await navigator.credentials.get({
      password: true,
      unmediated: true
    });
    if (credential && "password" in credential) {
      return credential.password;
    }
    return null;
  }
  async setItem(key, value) {
    const credential = await navigator.credentials.create({
      password: {
        id: key,
        name: key,
        password: value
      }
    });
    if (!credential) {
      throw new Error("Credential not created");
    }
    await navigator.credentials.store(credential);
  }
  async removeItem() {
    // Question: is there any way to remove a credential?
    const credential = await navigator.credentials.get({
      password: true,
      unmediated: true
    });
    if (credential) {
      await navigator.credentials.preventSilentAccess();
    }
  }
}

exports.LocalStorage = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.LocalStorage;
exports.SmartWallet = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.SmartWallet;
exports.WalletConnectHandler = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.WalletConnectHandler;
exports.WalletConnectV1Handler = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.WalletConnectV1Handler;
exports.WalletConnectV2Handler = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.WalletConnectV2Handler;
exports.createLocalStorage = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.createLocalStorage;
exports.getAllSigners = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.getAllSigners;
exports.getAllSmartWallets = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.getAllSmartWallets;
exports.getSmartWalletAddress = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.getSmartWalletAddress;
exports.isSmartWalletDeployed = evm_wallets_smartWallet_dist_thirdwebDevWalletsEvmWalletsSmartWallet.isSmartWalletDeployed;
exports.AbstractClientWallet = evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.AbstractClientWallet;
exports.AsyncLocalStorage = evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.AsyncLocalStorage;
exports.DEFAULT_DAPP_META = evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.DEFAULT_DAPP_META;
exports.createAsyncLocalStorage = evm_wallets_base_dist_thirdwebDevWalletsEvmWalletsBase.createAsyncLocalStorage;
exports.EIP155_SIGNING_METHODS = wc.EIP155_SIGNING_METHODS;
exports.walletIds = walletIds.walletIds;
exports.WagmiConnector = WagmiConnector.WagmiConnector;
exports.AddChainError = errors.AddChainError;
exports.ChainNotConfiguredError = errors.ChainNotConfiguredError;
exports.ProviderRpcError = errors.ProviderRpcError;
exports.SwitchChainError = errors.SwitchChainError;
exports.UserRejectedRequestError = errors.UserRejectedRequestError;
exports.normalizeChainId = normalizeChainId.normalizeChainId;
exports.Connector = connector.Connector;
exports.WagmiAdapter = connector.WagmiAdapter;
exports.assertWindowEthereum = assertWindowEthereum.assertWindowEthereum;
exports.PaperWallet = evm_wallets_paperWallet_dist_thirdwebDevWalletsEvmWalletsPaperWallet.PaperWallet;
exports.CoinbaseWallet = evm_wallets_coinbaseWallet_dist_thirdwebDevWalletsEvmWalletsCoinbaseWallet.CoinbaseWallet;
exports.LocalWallet = evm_wallets_localWallet_dist_thirdwebDevWalletsEvmWalletsLocalWallet.LocalWallet;
exports.isValidPrivateKey = evm_wallets_localWallet_dist_thirdwebDevWalletsEvmWalletsLocalWallet.isValidPrivateKey;
exports.FrameWallet = evm_wallets_frame_dist_thirdwebDevWalletsEvmWalletsFrame.FrameWallet;
exports.InjectedWallet = evm_wallets_injected_dist_thirdwebDevWalletsEvmWalletsInjected.InjectedWallet;
exports.MetaMaskWallet = evm_wallets_metamask_dist_thirdwebDevWalletsEvmWalletsMetamask.MetaMaskWallet;
exports.WalletConnect = evm_wallets_walletConnect_dist_thirdwebDevWalletsEvmWalletsWalletConnect.WalletConnect;
exports.WalletConnectV1 = evm_wallets_walletConnectV1_dist_thirdwebDevWalletsEvmWalletsWalletConnectV1.WalletConnectV1;
exports.SafeSupportedChainsSet = constants.SafeSupportedChainsSet;
exports.SafeWallet = evm_wallets_safe_dist_thirdwebDevWalletsEvmWalletsSafe.SafeWallet;
exports.MagicLink = evm_wallets_magic_dist_thirdwebDevWalletsEvmWalletsMagic.MagicLink;
exports.EthersWallet = evm_wallets_ethers_dist_thirdwebDevWalletsEvmWalletsEthers.EthersWallet;
exports.PrivateKeyWallet = evm_wallets_privateKey_dist_thirdwebDevWalletsEvmWalletsPrivateKey.PrivateKeyWallet;
exports.ZerionWallet = evm_wallets_zerion_dist_thirdwebDevWalletsEvmWalletsZerion.ZerionWallet;
exports.CredentialsStorage = CredentialsStorage;
