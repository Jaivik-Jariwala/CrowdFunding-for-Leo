import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace IAccountPermissions {
    type RoleRequestStruct = {
        role: BytesLike;
        target: string;
        action: BigNumberish;
        validityStartTimestamp: BigNumberish;
        validityEndTimestamp: BigNumberish;
        uid: BytesLike;
    };
    type RoleRequestStructOutput = [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        string
    ] & {
        role: string;
        target: string;
        action: number;
        validityStartTimestamp: BigNumber;
        validityEndTimestamp: BigNumber;
        uid: string;
    };
    type RoleRestrictionsStruct = {
        role: BytesLike;
        approvedTargets: string[];
        maxValuePerTransaction: BigNumberish;
        startTimestamp: BigNumberish;
        endTimestamp: BigNumberish;
    };
    type RoleRestrictionsStructOutput = [
        string,
        string[],
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        role: string;
        approvedTargets: string[];
        maxValuePerTransaction: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
    };
}
export interface AccountExtensionInterface extends utils.Interface {
    functions: {
        "changeRole((bytes32,address,uint8,uint128,uint128,bytes32),bytes)": FunctionFragment;
        "contractURI()": FunctionFragment;
        "execute(address,uint256,bytes)": FunctionFragment;
        "executeBatch(address[],uint256[],bytes[])": FunctionFragment;
        "getAllRoleMembers(bytes32)": FunctionFragment;
        "getRoleRestrictions(bytes32)": FunctionFragment;
        "getRoleRestrictionsForAccount(address)": FunctionFragment;
        "isAdmin(address)": FunctionFragment;
        "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
        "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
        "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
        "setAdmin(address,bool)": FunctionFragment;
        "setContractURI(string)": FunctionFragment;
        "setRoleRestrictions((bytes32,address[],uint256,uint128,uint128))": FunctionFragment;
        "supportsInterface(bytes4)": FunctionFragment;
        "verifyRoleRequest((bytes32,address,uint8,uint128,uint128,bytes32),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "changeRole" | "contractURI" | "execute" | "executeBatch" | "getAllRoleMembers" | "getRoleRestrictions" | "getRoleRestrictionsForAccount" | "isAdmin" | "onERC1155BatchReceived" | "onERC1155Received" | "onERC721Received" | "setAdmin" | "setContractURI" | "setRoleRestrictions" | "supportsInterface" | "verifyRoleRequest"): FunctionFragment;
    encodeFunctionData(functionFragment: "changeRole", values: [IAccountPermissions.RoleRequestStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "contractURI", values?: undefined): string;
    encodeFunctionData(functionFragment: "execute", values: [string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "executeBatch", values: [string[], BigNumberish[], BytesLike[]]): string;
    encodeFunctionData(functionFragment: "getAllRoleMembers", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleRestrictions", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleRestrictionsForAccount", values: [string]): string;
    encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
    encodeFunctionData(functionFragment: "onERC1155BatchReceived", values: [string, string, BigNumberish[], BigNumberish[], BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC1155Received", values: [string, string, BigNumberish, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "onERC721Received", values: [string, string, BigNumberish, BytesLike]): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setContractURI", values: [string]): string;
    encodeFunctionData(functionFragment: "setRoleRestrictions", values: [IAccountPermissions.RoleRestrictionsStruct]): string;
    encodeFunctionData(functionFragment: "supportsInterface", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "verifyRoleRequest", values: [IAccountPermissions.RoleRequestStruct, BytesLike]): string;
    decodeFunctionResult(functionFragment: "changeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "contractURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeBatch", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllRoleMembers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleRestrictions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleRestrictionsForAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155BatchReceived", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC1155Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "onERC721Received", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setContractURI", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRoleRestrictions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "supportsInterface", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyRoleRequest", data: BytesLike): Result;
    events: {
        "AdminUpdated(address,bool)": EventFragment;
        "ContractURIUpdated(string,string)": EventFragment;
        "RoleAssignment(bytes32,address,address,tuple)": EventFragment;
        "RoleUpdated(bytes32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "ContractURIUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAssignment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleUpdated"): EventFragment;
}
export interface AdminUpdatedEventObject {
    account: string;
    isAdmin: boolean;
}
export type AdminUpdatedEvent = TypedEvent<[
    string,
    boolean
], AdminUpdatedEventObject>;
export type AdminUpdatedEventFilter = TypedEventFilter<AdminUpdatedEvent>;
export interface ContractURIUpdatedEventObject {
    prevURI: string;
    newURI: string;
}
export type ContractURIUpdatedEvent = TypedEvent<[
    string,
    string
], ContractURIUpdatedEventObject>;
export type ContractURIUpdatedEventFilter = TypedEventFilter<ContractURIUpdatedEvent>;
export interface RoleAssignmentEventObject {
    role: string;
    account: string;
    signer: string;
    request: IAccountPermissions.RoleRequestStructOutput;
}
export type RoleAssignmentEvent = TypedEvent<[
    string,
    string,
    string,
    IAccountPermissions.RoleRequestStructOutput
], RoleAssignmentEventObject>;
export type RoleAssignmentEventFilter = TypedEventFilter<RoleAssignmentEvent>;
export interface RoleUpdatedEventObject {
    role: string;
    restrictions: IAccountPermissions.RoleRestrictionsStructOutput;
}
export type RoleUpdatedEvent = TypedEvent<[
    string,
    IAccountPermissions.RoleRestrictionsStructOutput
], RoleUpdatedEventObject>;
export type RoleUpdatedEventFilter = TypedEventFilter<RoleUpdatedEvent>;
export interface AccountExtension extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: AccountExtensionInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        changeRole(_req: IAccountPermissions.RoleRequestStruct, _signature: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        contractURI(overrides?: CallOverrides): Promise<[string]>;
        execute(_target: string, _value: BigNumberish, _calldata: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        executeBatch(_target: string[], _value: BigNumberish[], _calldata: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getAllRoleMembers(_role: BytesLike, overrides?: CallOverrides): Promise<[string[]]>;
        getRoleRestrictions(_role: BytesLike, overrides?: CallOverrides): Promise<[IAccountPermissions.RoleRestrictionsStructOutput]>;
        getRoleRestrictionsForAccount(_account: string, overrides?: CallOverrides): Promise<[IAccountPermissions.RoleRestrictionsStructOutput]>;
        isAdmin(_account: string, overrides?: CallOverrides): Promise<[boolean]>;
        onERC1155BatchReceived(arg0: string, arg1: string, arg2: BigNumberish[], arg3: BigNumberish[], arg4: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        onERC1155Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BigNumberish, arg4: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        onERC721Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setAdmin(_account: string, _isAdmin: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setContractURI(_uri: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setRoleRestrictions(_restrictions: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            signer: string;
        }>;
    };
    changeRole(_req: IAccountPermissions.RoleRequestStruct, _signature: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    contractURI(overrides?: CallOverrides): Promise<string>;
    execute(_target: string, _value: BigNumberish, _calldata: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    executeBatch(_target: string[], _value: BigNumberish[], _calldata: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getAllRoleMembers(_role: BytesLike, overrides?: CallOverrides): Promise<string[]>;
    getRoleRestrictions(_role: BytesLike, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
    getRoleRestrictionsForAccount(_account: string, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
    isAdmin(_account: string, overrides?: CallOverrides): Promise<boolean>;
    onERC1155BatchReceived(arg0: string, arg1: string, arg2: BigNumberish[], arg3: BigNumberish[], arg4: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    onERC1155Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BigNumberish, arg4: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    onERC721Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setAdmin(_account: string, _isAdmin: boolean, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setContractURI(_uri: string, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setRoleRestrictions(_restrictions: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
        success: boolean;
        signer: string;
    }>;
    callStatic: {
        changeRole(_req: IAccountPermissions.RoleRequestStruct, _signature: BytesLike, overrides?: CallOverrides): Promise<void>;
        contractURI(overrides?: CallOverrides): Promise<string>;
        execute(_target: string, _value: BigNumberish, _calldata: BytesLike, overrides?: CallOverrides): Promise<void>;
        executeBatch(_target: string[], _value: BigNumberish[], _calldata: BytesLike[], overrides?: CallOverrides): Promise<void>;
        getAllRoleMembers(_role: BytesLike, overrides?: CallOverrides): Promise<string[]>;
        getRoleRestrictions(_role: BytesLike, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
        getRoleRestrictionsForAccount(_account: string, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
        isAdmin(_account: string, overrides?: CallOverrides): Promise<boolean>;
        onERC1155BatchReceived(arg0: string, arg1: string, arg2: BigNumberish[], arg3: BigNumberish[], arg4: BytesLike, overrides?: CallOverrides): Promise<string>;
        onERC1155Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BigNumberish, arg4: BytesLike, overrides?: CallOverrides): Promise<string>;
        onERC721Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BytesLike, overrides?: CallOverrides): Promise<string>;
        setAdmin(_account: string, _isAdmin: boolean, overrides?: CallOverrides): Promise<void>;
        setContractURI(_uri: string, overrides?: CallOverrides): Promise<void>;
        setRoleRestrictions(_restrictions: IAccountPermissions.RoleRestrictionsStruct, overrides?: CallOverrides): Promise<void>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            signer: string;
        }>;
    };
    filters: {
        "AdminUpdated(address,bool)"(account?: string | null, isAdmin?: null): AdminUpdatedEventFilter;
        AdminUpdated(account?: string | null, isAdmin?: null): AdminUpdatedEventFilter;
        "ContractURIUpdated(string,string)"(prevURI?: null, newURI?: null): ContractURIUpdatedEventFilter;
        ContractURIUpdated(prevURI?: null, newURI?: null): ContractURIUpdatedEventFilter;
        "RoleAssignment(bytes32,address,address,tuple)"(role?: BytesLike | null, account?: string | null, signer?: string | null, request?: null): RoleAssignmentEventFilter;
        RoleAssignment(role?: BytesLike | null, account?: string | null, signer?: string | null, request?: null): RoleAssignmentEventFilter;
        "RoleUpdated(bytes32,tuple)"(role?: BytesLike | null, restrictions?: null): RoleUpdatedEventFilter;
        RoleUpdated(role?: BytesLike | null, restrictions?: null): RoleUpdatedEventFilter;
    };
    estimateGas: {
        changeRole(_req: IAccountPermissions.RoleRequestStruct, _signature: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        contractURI(overrides?: CallOverrides): Promise<BigNumber>;
        execute(_target: string, _value: BigNumberish, _calldata: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        executeBatch(_target: string[], _value: BigNumberish[], _calldata: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getAllRoleMembers(_role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleRestrictions(_role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleRestrictionsForAccount(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
        isAdmin(_account: string, overrides?: CallOverrides): Promise<BigNumber>;
        onERC1155BatchReceived(arg0: string, arg1: string, arg2: BigNumberish[], arg3: BigNumberish[], arg4: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        onERC1155Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BigNumberish, arg4: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        onERC721Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setAdmin(_account: string, _isAdmin: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setContractURI(_uri: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setRoleRestrictions(_restrictions: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        changeRole(_req: IAccountPermissions.RoleRequestStruct, _signature: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        contractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        execute(_target: string, _value: BigNumberish, _calldata: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        executeBatch(_target: string[], _value: BigNumberish[], _calldata: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getAllRoleMembers(_role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleRestrictions(_role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleRestrictionsForAccount(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAdmin(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        onERC1155BatchReceived(arg0: string, arg1: string, arg2: BigNumberish[], arg3: BigNumberish[], arg4: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        onERC1155Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BigNumberish, arg4: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        onERC721Received(arg0: string, arg1: string, arg2: BigNumberish, arg3: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setAdmin(_account: string, _isAdmin: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setContractURI(_uri: string, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setRoleRestrictions(_restrictions: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=AccountExtension.d.ts.map