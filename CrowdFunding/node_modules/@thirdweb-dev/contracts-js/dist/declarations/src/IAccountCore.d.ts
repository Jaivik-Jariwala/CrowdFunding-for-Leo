import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export type UserOperationStruct = {
    sender: string;
    nonce: BigNumberish;
    initCode: BytesLike;
    callData: BytesLike;
    callGasLimit: BigNumberish;
    verificationGasLimit: BigNumberish;
    preVerificationGas: BigNumberish;
    maxFeePerGas: BigNumberish;
    maxPriorityFeePerGas: BigNumberish;
    paymasterAndData: BytesLike;
    signature: BytesLike;
};
export type UserOperationStructOutput = [
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string
] & {
    sender: string;
    nonce: BigNumber;
    initCode: string;
    callData: string;
    callGasLimit: BigNumber;
    verificationGasLimit: BigNumber;
    preVerificationGas: BigNumber;
    maxFeePerGas: BigNumber;
    maxPriorityFeePerGas: BigNumber;
    paymasterAndData: string;
    signature: string;
};
export declare namespace IAccountPermissions {
    type RoleRequestStruct = {
        role: BytesLike;
        target: string;
        action: BigNumberish;
        validityStartTimestamp: BigNumberish;
        validityEndTimestamp: BigNumberish;
        uid: BytesLike;
    };
    type RoleRequestStructOutput = [
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        string
    ] & {
        role: string;
        target: string;
        action: number;
        validityStartTimestamp: BigNumber;
        validityEndTimestamp: BigNumber;
        uid: string;
    };
    type RoleRestrictionsStruct = {
        role: BytesLike;
        approvedTargets: string[];
        maxValuePerTransaction: BigNumberish;
        startTimestamp: BigNumberish;
        endTimestamp: BigNumberish;
    };
    type RoleRestrictionsStructOutput = [
        string,
        string[],
        BigNumber,
        BigNumber,
        BigNumber
    ] & {
        role: string;
        approvedTargets: string[];
        maxValuePerTransaction: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
    };
}
export interface IAccountCoreInterface extends utils.Interface {
    functions: {
        "changeRole((bytes32,address,uint8,uint128,uint128,bytes32),bytes)": FunctionFragment;
        "factory()": FunctionFragment;
        "getAllRoleMembers(bytes32)": FunctionFragment;
        "getRoleRestrictions(bytes32)": FunctionFragment;
        "getRoleRestrictionsForAccount(address)": FunctionFragment;
        "isAdmin(address)": FunctionFragment;
        "multicall(bytes[])": FunctionFragment;
        "setAdmin(address,bool)": FunctionFragment;
        "setRoleRestrictions((bytes32,address[],uint256,uint128,uint128))": FunctionFragment;
        "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": FunctionFragment;
        "verifyRoleRequest((bytes32,address,uint8,uint128,uint128,bytes32),bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "changeRole" | "factory" | "getAllRoleMembers" | "getRoleRestrictions" | "getRoleRestrictionsForAccount" | "isAdmin" | "multicall" | "setAdmin" | "setRoleRestrictions" | "validateUserOp" | "verifyRoleRequest"): FunctionFragment;
    encodeFunctionData(functionFragment: "changeRole", values: [IAccountPermissions.RoleRequestStruct, BytesLike]): string;
    encodeFunctionData(functionFragment: "factory", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAllRoleMembers", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleRestrictions", values: [BytesLike]): string;
    encodeFunctionData(functionFragment: "getRoleRestrictionsForAccount", values: [string]): string;
    encodeFunctionData(functionFragment: "isAdmin", values: [string]): string;
    encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
    encodeFunctionData(functionFragment: "setAdmin", values: [string, boolean]): string;
    encodeFunctionData(functionFragment: "setRoleRestrictions", values: [IAccountPermissions.RoleRestrictionsStruct]): string;
    encodeFunctionData(functionFragment: "validateUserOp", values: [UserOperationStruct, BytesLike, BigNumberish]): string;
    encodeFunctionData(functionFragment: "verifyRoleRequest", values: [IAccountPermissions.RoleRequestStruct, BytesLike]): string;
    decodeFunctionResult(functionFragment: "changeRole", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllRoleMembers", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleRestrictions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getRoleRestrictionsForAccount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "setRoleRestrictions", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "validateUserOp", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verifyRoleRequest", data: BytesLike): Result;
    events: {
        "AdminUpdated(address,bool)": EventFragment;
        "RoleAssignment(bytes32,address,address,tuple)": EventFragment;
        "RoleUpdated(bytes32,tuple)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AdminUpdated"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleAssignment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RoleUpdated"): EventFragment;
}
export interface AdminUpdatedEventObject {
    account: string;
    isAdmin: boolean;
}
export type AdminUpdatedEvent = TypedEvent<[
    string,
    boolean
], AdminUpdatedEventObject>;
export type AdminUpdatedEventFilter = TypedEventFilter<AdminUpdatedEvent>;
export interface RoleAssignmentEventObject {
    role: string;
    account: string;
    signer: string;
    request: IAccountPermissions.RoleRequestStructOutput;
}
export type RoleAssignmentEvent = TypedEvent<[
    string,
    string,
    string,
    IAccountPermissions.RoleRequestStructOutput
], RoleAssignmentEventObject>;
export type RoleAssignmentEventFilter = TypedEventFilter<RoleAssignmentEvent>;
export interface RoleUpdatedEventObject {
    role: string;
    restrictions: IAccountPermissions.RoleRestrictionsStructOutput;
}
export type RoleUpdatedEvent = TypedEvent<[
    string,
    IAccountPermissions.RoleRestrictionsStructOutput
], RoleUpdatedEventObject>;
export type RoleUpdatedEventFilter = TypedEventFilter<RoleUpdatedEvent>;
export interface IAccountCore extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAccountCoreInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        changeRole(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        factory(overrides?: CallOverrides): Promise<[string]>;
        getAllRoleMembers(role: BytesLike, overrides?: CallOverrides): Promise<[string[]] & {
            members: string[];
        }>;
        getRoleRestrictions(role: BytesLike, overrides?: CallOverrides): Promise<[
            IAccountPermissions.RoleRestrictionsStructOutput
        ] & {
            restrictions: IAccountPermissions.RoleRestrictionsStructOutput;
        }>;
        getRoleRestrictionsForAccount(account: string, overrides?: CallOverrides): Promise<[
            IAccountPermissions.RoleRestrictionsStructOutput
        ] & {
            role: IAccountPermissions.RoleRestrictionsStructOutput;
        }>;
        isAdmin(account: string, overrides?: CallOverrides): Promise<[boolean]>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setAdmin(account: string, isAdmin: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        setRoleRestrictions(role: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        validateUserOp(userOp: UserOperationStruct, userOpHash: BytesLike, missingAccountFunds: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            signer: string;
        }>;
    };
    changeRole(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    factory(overrides?: CallOverrides): Promise<string>;
    getAllRoleMembers(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;
    getRoleRestrictions(role: BytesLike, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
    getRoleRestrictionsForAccount(account: string, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
    isAdmin(account: string, overrides?: CallOverrides): Promise<boolean>;
    multicall(data: BytesLike[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setAdmin(account: string, isAdmin: boolean, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    setRoleRestrictions(role: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    validateUserOp(userOp: UserOperationStruct, userOpHash: BytesLike, missingAccountFunds: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
        success: boolean;
        signer: string;
    }>;
    callStatic: {
        changeRole(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<void>;
        factory(overrides?: CallOverrides): Promise<string>;
        getAllRoleMembers(role: BytesLike, overrides?: CallOverrides): Promise<string[]>;
        getRoleRestrictions(role: BytesLike, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
        getRoleRestrictionsForAccount(account: string, overrides?: CallOverrides): Promise<IAccountPermissions.RoleRestrictionsStructOutput>;
        isAdmin(account: string, overrides?: CallOverrides): Promise<boolean>;
        multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;
        setAdmin(account: string, isAdmin: boolean, overrides?: CallOverrides): Promise<void>;
        setRoleRestrictions(role: IAccountPermissions.RoleRestrictionsStruct, overrides?: CallOverrides): Promise<void>;
        validateUserOp(userOp: UserOperationStruct, userOpHash: BytesLike, missingAccountFunds: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<[boolean, string] & {
            success: boolean;
            signer: string;
        }>;
    };
    filters: {
        "AdminUpdated(address,bool)"(account?: string | null, isAdmin?: null): AdminUpdatedEventFilter;
        AdminUpdated(account?: string | null, isAdmin?: null): AdminUpdatedEventFilter;
        "RoleAssignment(bytes32,address,address,tuple)"(role?: BytesLike | null, account?: string | null, signer?: string | null, request?: null): RoleAssignmentEventFilter;
        RoleAssignment(role?: BytesLike | null, account?: string | null, signer?: string | null, request?: null): RoleAssignmentEventFilter;
        "RoleUpdated(bytes32,tuple)"(role?: BytesLike | null, restrictions?: null): RoleUpdatedEventFilter;
        RoleUpdated(role?: BytesLike | null, restrictions?: null): RoleUpdatedEventFilter;
    };
    estimateGas: {
        changeRole(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        factory(overrides?: CallOverrides): Promise<BigNumber>;
        getAllRoleMembers(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleRestrictions(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        getRoleRestrictionsForAccount(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        isAdmin(account: string, overrides?: CallOverrides): Promise<BigNumber>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setAdmin(account: string, isAdmin: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        setRoleRestrictions(role: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        validateUserOp(userOp: UserOperationStruct, userOpHash: BytesLike, missingAccountFunds: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        changeRole(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAllRoleMembers(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleRestrictions(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getRoleRestrictionsForAccount(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isAdmin(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        multicall(data: BytesLike[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setAdmin(account: string, isAdmin: boolean, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        setRoleRestrictions(role: IAccountPermissions.RoleRestrictionsStruct, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        validateUserOp(userOp: UserOperationStruct, userOpHash: BytesLike, missingAccountFunds: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        verifyRoleRequest(req: IAccountPermissions.RoleRequestStruct, signature: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IAccountCore.d.ts.map