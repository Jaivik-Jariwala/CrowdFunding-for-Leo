import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";
export declare namespace IAirdropERC721 {
    type AirdropContentStruct = {
        tokenAddress: string;
        tokenOwner: string;
        recipient: string;
        tokenId: BigNumberish;
    };
    type AirdropContentStructOutput = [
        string,
        string,
        string,
        BigNumber
    ] & {
        tokenAddress: string;
        tokenOwner: string;
        recipient: string;
        tokenId: BigNumber;
    };
}
export interface IAirdropERC721Interface extends utils.Interface {
    functions: {
        "addRecipients((address,address,address,uint256)[])": FunctionFragment;
        "airdrop((address,address,address,uint256)[])": FunctionFragment;
        "cancelPendingPayments(uint256)": FunctionFragment;
        "getAllAirdropPayments(uint256,uint256)": FunctionFragment;
        "getAllAirdropPaymentsFailed()": FunctionFragment;
        "getAllAirdropPaymentsPending(uint256,uint256)": FunctionFragment;
        "processPayments(uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "addRecipients" | "airdrop" | "cancelPendingPayments" | "getAllAirdropPayments" | "getAllAirdropPaymentsFailed" | "getAllAirdropPaymentsPending" | "processPayments"): FunctionFragment;
    encodeFunctionData(functionFragment: "addRecipients", values: [IAirdropERC721.AirdropContentStruct[]]): string;
    encodeFunctionData(functionFragment: "airdrop", values: [IAirdropERC721.AirdropContentStruct[]]): string;
    encodeFunctionData(functionFragment: "cancelPendingPayments", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAllAirdropPayments", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "getAllAirdropPaymentsFailed", values?: undefined): string;
    encodeFunctionData(functionFragment: "getAllAirdropPaymentsPending", values: [BigNumberish, BigNumberish]): string;
    encodeFunctionData(functionFragment: "processPayments", values: [BigNumberish]): string;
    decodeFunctionResult(functionFragment: "addRecipients", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "airdrop", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "cancelPendingPayments", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllAirdropPayments", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllAirdropPaymentsFailed", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getAllAirdropPaymentsPending", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processPayments", data: BytesLike): Result;
    events: {
        "AirdropPayment(address,uint256,bool)": EventFragment;
        "PaymentsCancelledByAdmin(uint256,uint256)": EventFragment;
        "RecipientsAdded(uint256,uint256)": EventFragment;
        "StatelessAirdrop(address,tuple,bool)": EventFragment;
    };
    getEvent(nameOrSignatureOrTopic: "AirdropPayment"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "PaymentsCancelledByAdmin"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "RecipientsAdded"): EventFragment;
    getEvent(nameOrSignatureOrTopic: "StatelessAirdrop"): EventFragment;
}
export interface AirdropPaymentEventObject {
    recipient: string;
    index: BigNumber;
    failed: boolean;
}
export type AirdropPaymentEvent = TypedEvent<[
    string,
    BigNumber,
    boolean
], AirdropPaymentEventObject>;
export type AirdropPaymentEventFilter = TypedEventFilter<AirdropPaymentEvent>;
export interface PaymentsCancelledByAdminEventObject {
    startIndex: BigNumber;
    endIndex: BigNumber;
}
export type PaymentsCancelledByAdminEvent = TypedEvent<[
    BigNumber,
    BigNumber
], PaymentsCancelledByAdminEventObject>;
export type PaymentsCancelledByAdminEventFilter = TypedEventFilter<PaymentsCancelledByAdminEvent>;
export interface RecipientsAddedEventObject {
    startIndex: BigNumber;
    endIndex: BigNumber;
}
export type RecipientsAddedEvent = TypedEvent<[
    BigNumber,
    BigNumber
], RecipientsAddedEventObject>;
export type RecipientsAddedEventFilter = TypedEventFilter<RecipientsAddedEvent>;
export interface StatelessAirdropEventObject {
    recipient: string;
    content: IAirdropERC721.AirdropContentStructOutput;
    failed: boolean;
}
export type StatelessAirdropEvent = TypedEvent<[
    string,
    IAirdropERC721.AirdropContentStructOutput,
    boolean
], StatelessAirdropEventObject>;
export type StatelessAirdropEventFilter = TypedEventFilter<StatelessAirdropEvent>;
export interface IAirdropERC721 extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: IAirdropERC721Interface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        addRecipients(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        airdrop(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        cancelPendingPayments(numberOfPaymentsToCancel: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
        getAllAirdropPayments(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<[
            IAirdropERC721.AirdropContentStructOutput[]
        ] & {
            contents: IAirdropERC721.AirdropContentStructOutput[];
        }>;
        getAllAirdropPaymentsFailed(overrides?: CallOverrides): Promise<[
            IAirdropERC721.AirdropContentStructOutput[]
        ] & {
            contents: IAirdropERC721.AirdropContentStructOutput[];
        }>;
        getAllAirdropPaymentsPending(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<[
            IAirdropERC721.AirdropContentStructOutput[]
        ] & {
            contents: IAirdropERC721.AirdropContentStructOutput[];
        }>;
        processPayments(paymentsToProcess: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<ContractTransaction>;
    };
    addRecipients(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    airdrop(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    cancelPendingPayments(numberOfPaymentsToCancel: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    getAllAirdropPayments(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<IAirdropERC721.AirdropContentStructOutput[]>;
    getAllAirdropPaymentsFailed(overrides?: CallOverrides): Promise<IAirdropERC721.AirdropContentStructOutput[]>;
    getAllAirdropPaymentsPending(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<IAirdropERC721.AirdropContentStructOutput[]>;
    processPayments(paymentsToProcess: BigNumberish, overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        addRecipients(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: CallOverrides): Promise<void>;
        airdrop(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: CallOverrides): Promise<void>;
        cancelPendingPayments(numberOfPaymentsToCancel: BigNumberish, overrides?: CallOverrides): Promise<void>;
        getAllAirdropPayments(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<IAirdropERC721.AirdropContentStructOutput[]>;
        getAllAirdropPaymentsFailed(overrides?: CallOverrides): Promise<IAirdropERC721.AirdropContentStructOutput[]>;
        getAllAirdropPaymentsPending(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<IAirdropERC721.AirdropContentStructOutput[]>;
        processPayments(paymentsToProcess: BigNumberish, overrides?: CallOverrides): Promise<void>;
    };
    filters: {
        "AirdropPayment(address,uint256,bool)"(recipient?: string | null, index?: null, failed?: null): AirdropPaymentEventFilter;
        AirdropPayment(recipient?: string | null, index?: null, failed?: null): AirdropPaymentEventFilter;
        "PaymentsCancelledByAdmin(uint256,uint256)"(startIndex?: null, endIndex?: null): PaymentsCancelledByAdminEventFilter;
        PaymentsCancelledByAdmin(startIndex?: null, endIndex?: null): PaymentsCancelledByAdminEventFilter;
        "RecipientsAdded(uint256,uint256)"(startIndex?: null, endIndex?: null): RecipientsAddedEventFilter;
        RecipientsAdded(startIndex?: null, endIndex?: null): RecipientsAddedEventFilter;
        "StatelessAirdrop(address,tuple,bool)"(recipient?: string | null, content?: null, failed?: null): StatelessAirdropEventFilter;
        StatelessAirdrop(recipient?: string | null, content?: null, failed?: null): StatelessAirdropEventFilter;
    };
    estimateGas: {
        addRecipients(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        airdrop(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        cancelPendingPayments(numberOfPaymentsToCancel: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
        getAllAirdropPayments(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        getAllAirdropPaymentsFailed(overrides?: CallOverrides): Promise<BigNumber>;
        getAllAirdropPaymentsPending(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        processPayments(paymentsToProcess: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        addRecipients(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        airdrop(_contents: IAirdropERC721.AirdropContentStruct[], overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        cancelPendingPayments(numberOfPaymentsToCancel: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
        getAllAirdropPayments(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAllAirdropPaymentsFailed(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        getAllAirdropPaymentsPending(startId: BigNumberish, endId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        processPayments(paymentsToProcess: BigNumberish, overrides?: Overrides & {
            from?: string | Promise<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=IAirdropERC721.d.ts.map