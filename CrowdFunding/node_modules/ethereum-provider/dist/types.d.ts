/// <reference types="node" />
import EventEmitter from 'events';
import type { JsonRpcPayload } from './payload';
export interface RequestArguments {
    method: string;
    params?: readonly unknown[] | object;
}
export declare type Payload = RequestArguments & {
    chainId?: string;
};
export declare type ProviderError = {
    code: number;
    data?: unknown;
};
export interface EthereumProvider {
    request(payload: RequestArguments): Promise<unknown>;
    on: (event: string, cb: (data: unknown) => void) => void;
    removeListener: (event: string, handler: (data: unknown) => void) => void;
}
export declare type JsonRpcResponse = {
    jsonrpc: '2.0';
    id: number;
    result: unknown;
};
export declare type EventHandler = (eventPayload: unknown) => void;
export declare type Callback<T> = (err: Error | null, result?: T) => void;
export declare type PendingPromise = {
    resolve: (result: unknown) => void;
    reject: (err: Error) => void;
    method: string;
};
export interface Connection extends EventEmitter {
    send: (payload: JsonRpcPayload) => Promise<void>;
    close: () => void;
}
